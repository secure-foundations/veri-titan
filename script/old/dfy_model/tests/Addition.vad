include "../code/decls.vad"

#verbatim
include "../code/vale.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

include "BitVector.dfy"

import opened bignum_vale
import opened bignum_def
import opened ops
import opened types

import opened bignum_decls
import opened CutomBitVector
import opened powers

#endverbatim

type cbv:Type(0) extern;

function equal_uint256(bv: cbv, v: uint256): bool extern;
function equal_uint512(bv: cbv, v1: uint256, v2: uint256): bool extern;
function equal_uint768(bv: cbv, v1: uint256, v2: uint256, v3: uint256): bool extern;

function equal_uint256_seq(bv: cbv, vs: seq(uint256)): bool extern;
function get_carray_flag(fg: Flags): uint1 extern;
function add(v1: cbv, v2: cbv, cin: uint1) : tuple(cbv, uint1) extern;
function pow2(e: int) : (r : int) extern;
function to_nat(e: cbv) : (r : int) extern;
function mod(p: int, n: int) : (r : int) extern;
const BASE_256: int extern;

procedure add_256(ghost v1: cbv, ghost v2: cbv)
    requires
        equal_uint256(v1, w1);
        equal_uint256(v2, w2);
    reads
        w1; w2;
    modifies
        w3; flags;
{
    assume pow2(256) == BASE_256;

    BN_ADD(w3, w2, w1, false, 0, false);
    ghost var rst := add(v1, v2, 0);
    ghost var v3 := fst(rst);
    ghost var c := snd(rst);

    assert c == get_carray_flag(flags);
    assert equal_uint256(v3, w3);
}

procedure add_512_1(ghost v1: cbv, ghost v2: cbv, ghost v3: cbv, ghost v4: cbv)
    requires
        equal_uint256(v1, w1);
        equal_uint256(v2, w2);
        equal_uint256(v3, w3);
        equal_uint256(v4, w4);
    reads
        w1; w2; w3; w4;
    modifies
        w5; w6; flags;
{
    assume pow2(256) == BASE_256;

    BN_ADD(w5, w3, w1, false, 0, false);
    ghost var rst5 := add(v1, v3, 0);
    ghost var v5 := fst(rst5);
    ghost var c := snd(rst5);

    assert c == get_carray_flag(flags);
    assert equal_uint256(v3, w3);

    BN_ADDC(w6, w4, w2, false, 0, false);

    ghost var rst6 := add(v4, v2, c);
    ghost var v6 := fst(rst6);
    assert equal_uint256(v6, w6);
}

procedure add_512_2(ghost v1: cbv, ghost v2: cbv)
    requires
        equal_uint512(v1, w1, w2);
        equal_uint512(v2, w3, w4);
    reads
        w1; w2; w3; w4;
    modifies
        w5; w6; flags;
{
    assume pow2(256) == BASE_256;
    assume pow2(512) == BASE_256 * BASE_256;

    BN_ADD(w5, w3, w1, false, 0, false);
    ghost var c1 := get_carray_flag(flags);
    assert w5 == mod(w3 + w1, BASE_256);
    assert w5 + c1 * BASE_256 == w3 + w1;

    BN_ADDC(w6, w4, w2, false, 0, false);
    ghost var c2 := get_carray_flag(flags);
    assert w6 == mod(w4 + w2 + c1, BASE_256);
    assert w6 + c2 * BASE_256 == w4 + w2 + c1;

    assert to_nat(v1) == w1 + w2 * BASE_256;
    assert to_nat(v2) == w3 + w4 * BASE_256;

    ghost var rst := add(v1, v2, 0);
    ghost var v3 := fst(rst);

    calc == {
        to_nat(v3);
        ==
        mod(w1 + w2 * BASE_256 + w3 + w4 * BASE_256, pow2(512));
        == 
        mod(w5 + c1 * BASE_256 + w2 * BASE_256 + w4 * BASE_256, pow2(512));
        ==
        mod(w5 + (w2 + w4 + c1) * BASE_256, pow2(512));
        ==
        mod(w5 + (w6 + c2 * BASE_256) * BASE_256, pow2(512));
        ==
        mod(w5 + w6 * BASE_256 + c2 * BASE_256 * BASE_256, pow2(512));
        == { assume false; }
        mod(w5 + w6 * BASE_256, pow2(512));
        ==
        w5 + w6 * BASE_256;
    }

    assert equal_uint512(v3, w5, w6);
}

// procedure add_512_3(ghost v1: cbv, ghost v2: cbv)
//     requires
//         equal_uint256_seq(v1, seq(w1, w2));
//         equal_uint256_seq(v2, seq(w3, w4));
//     reads
//         w1; w2; w3; w4;
//     modifies
//         w5; w6; flags;
// {
// }

procedure add_768(ghost v1: cbv, ghost v2: cbv)
    requires
        equal_uint768(v1, w1, w2, w3);
        equal_uint768(v2, w4, w5, w6);
    reads
        w1; w2; w3; w4; w5; w6;
    modifies
        w7; w8; w9; flags;
{
    assume pow2(256) == BASE_256;
    assume pow2(512) == BASE_256 * BASE_256;
    assume pow2(768) == BASE_256 * BASE_256 * BASE_256;

    BN_ADD(w7, w4, w1, false, 0, false);
    ghost var c1 := get_carray_flag(flags);

    BN_ADDC(w8, w5, w2, false, 0, false);
    ghost var c2 := get_carray_flag(flags);
    assert w8 + c2 * BASE_256 == w5 + w2 + c1;

    BN_ADDC(w9, w6, w3, false, 0, false);
    ghost var c3 := get_carray_flag(flags);
    assert w9 + c3 * BASE_256 == w6 + w3 + c2;

    ghost var rst := add(v1, v2, 0);
    ghost var v3 := fst(rst);

    assert to_nat(v1) == w1 + w2 * BASE_256 + w3 * BASE_256 * BASE_256;
    assert to_nat(v2) == w4 + w5 * BASE_256 + w6 * BASE_256 * BASE_256;

    calc == {
        to_nat(v1) + to_nat(v2);
        ==
        w1 + w2 * BASE_256 + w3 * BASE_256 * BASE_256 +
        w4 + w5 * BASE_256 + w6 * BASE_256 * BASE_256;
        == { assert w7 + c1 * BASE_256 == w4 + w1; }
        w7 + c1 * BASE_256 + w2 * BASE_256 + w3 * BASE_256 * BASE_256 +
        w5 * BASE_256 + w6 * BASE_256 * BASE_256;    
        == { assert w8 + c2 * BASE_256 == w5 + w2 + c1; }
        w7 + w8 * BASE_256 + c2 * BASE_256 * BASE_256 + w3 * BASE_256 * BASE_256 +
        w6 * BASE_256 * BASE_256;
        == { assert w9 + c3 * BASE_256 == w6 + w3 + c2; }
        w7 + w8 * BASE_256 + w9 * BASE_256 * BASE_256 + c3 * BASE_256 * BASE_256 * BASE_256;
    }

    calc == {
        to_nat(v3);
        ==
        mod(to_nat(v1) + to_nat(v2), pow2(768));
        == { assert to_nat(v1) + to_nat(v2) == w7 + w8 * BASE_256 + w9 * BASE_256 * BASE_256 + c3 * BASE_256 * BASE_256 * BASE_256; }
        mod(w7 + w8 * BASE_256 + w9 * BASE_256 * BASE_256 + c3 * BASE_256 * BASE_256 * BASE_256, pow2(768));
        == { assume false; }
        mod(w7 + w8 * BASE_256 + w9 * BASE_256 * BASE_256, pow2(768));
        ==
        w7 + w8 * BASE_256 + w9 * BASE_256 * BASE_256;
    }

    assert equal_uint768(v3, w7, w8, w9);
}