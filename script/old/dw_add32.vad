include "../../arch/otbn/decls.i.vad"
include "../../arch/riscv/decls.i.vad"

#verbatim

include "../../arch/riscv/decls.i.dfy"
include "../../../impl/dafny/dw_add_lemmas.dfy"

module dw_add_32 refines dw_add {

import opened bv_ops

import opened rv_machine
import opened rv_decls
import opened rv_vale

function method BASE(): nat
{
    BASE_32
}
#endverbatim

function ToNatRight #[a: Type(0)] (s: seq(a)): nat extern;

function uint_dw_add_is_safe(
    x_lh: uint256, x_uh: uint256,
    y_lh: uint256, y_uh: uint256
): bool extern;

function uint_dw_add_correct(
    x_lh: uint256, x_uh: uint256,
    y_lh: uint256, y_uh: uint256,
    c1: uint1, c2: uint1,
    z_lh: uint256, z_uh: uint256): void extern;

procedure seq_addc_64()
    requires
        uint_dw_add_is_safe(x15, x11, x12, 0);
    modifies
        x10; x15; x16;
    reads
        x12; x11;
    ensures 
        ToNatRight(seq(x10, x16)) == ToNatRight(seq(old(x15), x11)) + ToNatRight(seq(x12, 0));
{
    add_wrap(x10, x15, x12);

    sltu(x15, x10, x15);
    ghost var c1 := if x15 == 0 then 0 else 1;
    
    add_wrap(x16, x11, x15);
    ghost var c2 := if x16 < x15 then 1 else 0;

    uint_dw_add_correct(old(x15), x11, x12, 0, c1, c2, x10, x16);
}

#verbatim
}
#endverbatim