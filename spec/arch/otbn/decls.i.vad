include "../common.i.vad"
include{: verbatim} "../../arch/otbn/vale.i.dfy"

#verbatim
module ot_decls {
    // import opened bv_ops
    import opened integers
    import opened ot_machine
    import opened ot_abstraction
    import opened ot_vale
    import opened mem
    import opened flat

#endverbatim


function Pow(b: int, e: nat) : int extern;
function IsModEquivalent(a: int, b: int, n: int) : bool extern;
function cong_BASE(a: int, b: int) : bool extern;
function pow_BASE(e: nat): nat extern;

function GPR(index: nat): reg32_t extern;

type state: Type(0) {: primitive} extern;

type mem_t: Type(0) extern;
var mem: mem_t {:state mem()};
function operator(.mem) (s: state): mem_t extern;
function operator(.mem := ) (s: state, mem: mem_t): state extern;

type flat_t: Type(0) extern;
var flat: flat_t {:state flat()};

type reg32_t: Type(0) extern;
function operator(.index) (r :reg32_t): nat extern;

type reg256_t: Type(0) extern;
function operator(.index) (r :reg256_t): nat extern;
function is_wide_data_register(r: reg256_t): bool extern;

type entry_t: Type(0) extern;
function W32(v: uint32): entry_t extern;
function B256(b: seq(uint256)): entry_t extern;
function operator(.w32) (e :entry_t): uint32 extern;
function operator(.b256) (e :entry_t): seq(uint256) extern;

type heap_t:  Type(0) := map(int, entry_t);
var heap: heap_t {:state heap()};
function heap_w32_ptr_valid(heap: heap_t, ptr: int): bool extern;
function buff_base_ptr_valid(heap: heap_t, ptr: nat): bool extern;
function heap_w32_read(heap: heap_t, ptr: int): uint32 extern;
function heap_w32_write(heap: heap_t, ptr: int, value: uint32): heap_t extern;

function heap_b256_write(heap: heap_t, iter: iter_t, value: uint256): heap_t extern;

function buff_base_addr_valid(heap: heap_t, ptr: int): bool extern;

type wdrs_t: Type(0) extern;
function operator([]) (s: wdrs_t, i: int): uint256 extern; 
function operator([ := ]) (s: wdrs_t, i: int, v: uint256): wdrs_t extern;
function operator([ .. ]) (s: wdrs_t, begin: int, end: int): seq(uint256) extern;

function bool_to_uint1(i:bool) : uint1 extern;

var wdrs: wdrs_t {:state wdrs()};
function valid_wdr_view(wdrs: wdrs_t, view: seq(uint256), start: nat, len: int): bool extern;

type flags_t: Type(0) extern;
function operator(.cf) (fg: flags_t): bool extern;
function operator(.cf := ) (fg: flags_t, f: bool): flags_t extern;
function operator(.msb) (fg :flags_t): bool extern;
function operator(.msb := ) (fg: flags_t, f: bool): flags_t extern;
function operator(.lsb) (fg :flags_t): bool extern;
function operator(.lsb := ) (fg: flags_t, f: bool): flags_t extern;
function operator(.zero) (fg: flags_t): bool extern;
function operator(.zero := ) (fg: flags_t, f: bool): flags_t extern;
function flags_as_uint(fg: flags_t): uint4 extern;

type fgroups_t: Type(0) extern;
function operator(.fg0) (fgroups: fgroups_t): flags_t extern;
function operator(.fg1) (fgroups :fgroups_t): flags_t extern;

var fgroups: fgroups_t  {:state fgroups()};
function get_fgroup(fgps: fgroups_t, which_group: uint1): flags_t extern;
function update_fgroups(fgps: fgroups_t, which_group: uint1, new_flags_t: flags_t) : fgroups_t extern;
function get_flag(fgps: fgroups_t, which_group: uint1, which_flag: int): bool extern;

function to_2s_comp_uint32(n: int): uint32 extern;

type uint512_view_t: Type(0) extern;
function uint512_cons(lh: int, uh: int, full: int): uint512_view_t extern;
function valid_uint512_view(wdrs: wdrs_t, num: uint512_view_t, li: int, ui: int): bool extern;
function operator(.lh) (num: uint512_view_t): int extern;
function operator(.uh) (num: uint512_view_t): int extern;
function operator(.li) (num: uint512_view_t): int extern;
function operator(.ui) (num: uint512_view_t): int extern;
function operator(.full) (num: uint512_view_t): int extern;

var symbols: map(string, uint32) {:state symbols()};

var ok: bool {:state ok()};

type iter_t: Type(0) extern;
function b256_iter_cons(base_addr: int, index: nat, buff: seq(uint256)): iter_t extern;
function b256_iter_load_next(iter: iter_t, inc: bool): iter_t extern;
function b256_iter_store_next(iter: iter_t, value: uint256, inc: bool): iter_t extern;
function operator(.base_ptr) (iter :iter_t): int extern;
function operator(.index) (iter :iter_t): int extern;
function operator(.index := ) (iter: iter_t, i :int): iter_t extern;
function operator(.buff) (iter :iter_t): seq(uint256) extern;
function operator(.buff := ) (iter :iter_t, buff: seq(uint256)): iter_t extern;

function iter_inv(iter: iter_t, h: heap_t, ptr: int): bool extern;
function iter_safe(iter: iter_t, h: heap_t, ptr: int): bool extern;
function mvars_iter_init(iter: iter_t, h: heap_t, ptr: int, value: int): bool extern;

type rsa_params: Type(0) extern;
function operator(.E0) (rsa: rsa_params): nat extern;
function operator(.E) (rsa: rsa_params): nat extern;
function operator(.M) (rsa: rsa_params): nat extern;
function operator(.SIG) (rsa: rsa_params): nat extern;
function operator(.M0D) (rsa: rsa_params): uint256 extern;
function operator(.B256_INV) (rsa: rsa_params): nat extern;
function operator(.R) (rsa: rsa_params): nat extern;
function operator(.RR) (rsa: rsa_params): nat extern;
function operator(.R_INV) (rsa: rsa_params): nat extern;
function rsa_params_inv(rsa: rsa_params): bool extern;

type mvars: Type(0) extern;
function operator(.x_it) (vars: mvars): iter_t extern;
function operator(.x_it := ) (vars: mvars, it: iter_t): mvars extern;
function operator(.y_it) (vars: mvars): iter_t extern;
function operator(.y_it := ) (vars: mvars, it: iter_t): mvars extern;
function operator(.sig_it) (vars: mvars): iter_t extern;
function operator(.m_it) (vars: mvars): iter_t extern;
function operator(.rr_it) (vars: mvars): iter_t extern;
function operator(.m0d_it) (vars: mvars): iter_t extern;
function operator(.rsa) (vars: mvars): rsa_params extern;
function mvars_inv(vars: mvars, heap: heap_t, x_ptr: int, y_ptr: int,
    m_ptr: int, rr_ptr: int, m0d_ptr: int, sig_ptr: int): bool extern;

function Loop(u: uint32) : bool extern;
function LoopImm(u: uint32) : bool extern;

type string: Type(0) extern;

function fst #[a: Type(0), b: Type(0)](m: tuple(a, b)): a extern;
function snd #[a: Type(0), b: Type(0)](m: tuple(a, b)): b extern;

function to_nat #[a: Type(0)] (s: seq(a)): nat extern;
ghost procedure LemmaSeqLen2 #[a: Type(0)] (ghost xs: seq(a)) extern;

var x0: uint32 {:state reg32_t(GPR(0))};
var x1: uint32 {:state reg32_t(GPR(1))};
var x2: uint32 {:state reg32_t(GPR(2))};
var x3: uint32 {:state reg32_t(GPR(3))};
var x4: uint32 {:state reg32_t(GPR(4))};
var x5: uint32 {:state reg32_t(GPR(5))};
var x6: uint32 {:state reg32_t(GPR(6))};
var x7: uint32 {:state reg32_t(GPR(7))};
var x8: uint32 {:state reg32_t(GPR(8))};
var x9: uint32 {:state reg32_t(GPR(9))};
var x10: uint32 {:state reg32_t(GPR(10))};
var x11: uint32 {:state reg32_t(GPR(11))};
var x12: uint32 {:state reg32_t(GPR(12))};
var x13: uint32 {:state reg32_t(GPR(13))};
var x14: uint32 {:state reg32_t(GPR(14))};
var x15: uint32 {:state reg32_t(GPR(15))};
var x16: uint32 {:state reg32_t(GPR(16))};
var x17: uint32 {:state reg32_t(GPR(17))};
var x18: uint32 {:state reg32_t(GPR(18))};
var x19: uint32 {:state reg32_t(GPR(19))};
var x20: uint32 {:state reg32_t(GPR(20))};
var x21: uint32 {:state reg32_t(GPR(21))};
var x22: uint32 {:state reg32_t(GPR(22))};
var x23: uint32 {:state reg32_t(GPR(23))};
var x24: uint32 {:state reg32_t(GPR(24))};
var x25: uint32 {:state reg32_t(GPR(25))};
var x26: uint32 {:state reg32_t(GPR(26))};
var x27: uint32 {:state reg32_t(GPR(27))};
var x28: uint32 {:state reg32_t(GPR(28))};
var x29: uint32 {:state reg32_t(GPR(29))};
var x30: uint32 {:state reg32_t(GPR(30))};
var x31: uint32 {:state reg32_t(GPR(31))};

var w0: uint256 {:state reg256_t(WDR(0))};
var w1: uint256 {:state reg256_t(WDR(1))};
var w2: uint256 {:state reg256_t(WDR(2))};
var w3: uint256 {:state reg256_t(WDR(3))};
var w4: uint256 {:state reg256_t(WDR(4))};
var w5: uint256 {:state reg256_t(WDR(5))};
var w6: uint256 {:state reg256_t(WDR(6))};
var w7: uint256 {:state reg256_t(WDR(7))};
var w8: uint256 {:state reg256_t(WDR(8))};
var w9: uint256 {:state reg256_t(WDR(9))};
var w10: uint256 {:state reg256_t(WDR(10))};
var w11: uint256 {:state reg256_t(WDR(11))};
var w12: uint256 {:state reg256_t(WDR(12))};
var w13: uint256 {:state reg256_t(WDR(13))};
var w14: uint256 {:state reg256_t(WDR(14))};
var w15: uint256 {:state reg256_t(WDR(15))};
var w16: uint256 {:state reg256_t(WDR(16))};
var w17: uint256 {:state reg256_t(WDR(17))};
var w18: uint256 {:state reg256_t(WDR(18))};
var w19: uint256 {:state reg256_t(WDR(19))};
var w20: uint256 {:state reg256_t(WDR(20))};
var w21: uint256 {:state reg256_t(WDR(21))};
var w22: uint256 {:state reg256_t(WDR(22))};
var w23: uint256 {:state reg256_t(WDR(23))};
var w24: uint256 {:state reg256_t(WDR(24))};
var w25: uint256 {:state reg256_t(WDR(25))};
var w26: uint256 {:state reg256_t(WDR(26))};
var w27: uint256 {:state reg256_t(WDR(27))};
var w28: uint256 {:state reg256_t(WDR(28))};
var w29: uint256 {:state reg256_t(WDR(29))};
var w30: uint256 {:state reg256_t(WDR(30))};
var w31: uint256 {:state reg256_t(WDR(31))};

var wmod: uint256 {:state reg256_t(WMOD)};
var wrnd: uint256 {:state reg256_t(WRND)};
var wacc: uint256 {:state reg256_t(WACC)};

operand_type reg32: uint32 @ reg32_t :=
| inout x0 | inout x1 | inout x2 | inout x3
| inout x4 | inout x5 | inout x6 | inout x7
| inout x8 | inout x9 | inout x10 | inout x11
| inout x12 | inout x13 | inout x14 | inout x15
| inout x16 | inout x17 | inout x18 | inout x19
| inout x20 | inout x21 | inout x22 | inout x23
| inout x24 | inout x25 | inout x26 | inout x27
| inout x28 | inout x29 | inout x30 | inout x31;

operand_type reg256: uint256 @ reg256_t := 
| inout w0 | inout w1 | inout w2 | inout w3
| inout w4 | inout w5 | inout w6 | inout w7
| inout w8 | inout w9 | inout w10 | inout w11
| inout w12 | inout w13 | inout w14 | inout w15
| inout w16 | inout w17 | inout w18 | inout w19
| inout w20 | inout w21 | inout w22 | inout w23
| inout w24 | inout w25 | inout w26 | inout w27
| inout w28 | inout w29 | inout w30 | inout w31
| inout wmod | inout wrnd | inout wacc;

type shift_t: Type(0) extern;
const SFT_DFT: shift_t extern;
const NA: int extern;

function uint32_xor(x: uint32, y: uint32): uint32 extern;
function uint32_or(x: uint32, y: uint32): uint32 extern;
function uint32_and(x: uint32, y: uint32): uint32 extern;
function uint32_add(x: uint32, y: uint32): uint32 extern;
function uint32_addi(x: uint32, y: int12): uint32 extern;
function uint32_add(x: uint32, y: uint32): uint32 extern;
function uint32_sub(x: uint32, y: uint32): uint32 extern;
function uint32_andi(x: uint32, y: int12): uint32 extern;
function uint32_xori(x: uint32, y: int12): uint32 extern;
function uint32_not(x: uint32): uint32 extern;
function uint32_ls(x: uint32, amount: uint32): uint32 extern; 
function uint32_se(x: uint32, size: int): uint32 extern;
function uint32_rs(x: uint32, size: int): uint32 extern;

function uint256_hwb(x: uint256, v: uint128, lower: bool): uint256 extern;
function uint256_qmul(x: uint256, qx: uint2, y: uint256, qy: uint2): uint128 extern;
function uint256_and(x: uint256, y: uint256): uint256 extern;
function uint256_or(x: uint256, y: uint256): uint256 extern;
function uint256_ls(x: uint256, shift: uint2): uint256 extern;
// function uint256_rs(x: uint256, num_bytes: int): uint256 extern;
function uint256_lh(a: int): uint128 extern;
function uint256_uh(a: int): uint128 extern;
function uint256_addc(x: uint256, y: uint256, cin: uint1): tuple(uint256, uint1) extern;
function uint256_subb(x: uint256, y: uint256, bin: uint1): tuple(uint256, uint1) extern;

function uint512_uh(a: int): uint256 extern;
function uint512_lh(a: int): uint256 extern;
function half_splited_uint512(x: int, lh: uint256, uh: uint256): bool extern;

function otbn_xor(a: uint256, b: uint256, shift: shift_t, cin: bool): tuple(uint256, flags_t) extern;
function otbn_addc(a: uint256, b: uint256, shift: shift_t, cin: bool): tuple(uint256, flags_t) extern;
function otbn_subb(a: uint256, b: uint256, shift: shift_t, bin: bool): tuple(uint256, flags_t) extern;
function otbn_subbi(a: uint256, b: uint256): tuple(uint256, flags_t) extern;
function otbn_addm(a: uint256, b: uint256, mod: uint256): uint256 extern;
function otbn_subm(a: uint256, b: uint256, mod: uint256): uint256 extern;
function otbn_rshi(src1: uint256, src2: uint256, imm: uint32): uint256 extern;
function otbn_mulqacc_is_safe(shift: uint32, macc: uint256): bool extern;
function otbn_mulqacc_safe(zero: bool, a: uint256, qa: uint32, b: uint256, qb: uint32, shift: uint32, macc: uint256): uint256 extern;
function otbn_mulqacc(zero: bool, a: uint256, qa: uint32, b: uint256, qb: uint32, shift: uint32, macc: uint256): uint256 extern;

function SeqSub #[a:Type(0)] (x: seq(a), y: seq(a)) : tuple(seq(a), uint1) extern;
function SeqAdd #[a:Type(0)] (x: seq(a), y: seq(a)) : tuple(seq(a), uint1) extern;

type mulqacc_so_result_t: Type(0) extern;
function operator(.new_acc) (m: mulqacc_so_result_t): uint256 extern;
function operator(.new_dst) (m: mulqacc_so_result_t): uint256 extern;
function operator(.new_flags) (m: mulqacc_so_result_t): flags_t extern;
function otbn_mulqacc_so(product: uint256, z: uint256, lower: bool, flags: flags_t) : mulqacc_so_result_t extern;

function seq_addc_512_is_safe(x: seq(uint256), y: seq(uint256)) : bool extern;

procedure lw(out grd: reg32, inline offset: int12, in grs1: reg32)
    {:instruction Ins32(LW(grd, offset, grs1))}
    reads
        heap;
    requires
        heap_w32_ptr_valid(heap, uint32_addi(grs1, offset));
    ensures
        heap_w32_ptr_valid(heap, uint32_addi(old(grs1), offset));
        grd == heap_w32_read(heap, uint32_addi(old(grs1), offset));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

function sw_correct(gs: state, grs2: reg32_t, offset: int12, grs1: reg32_t, write_ptr: uint32):  (new_mem: mem_t) extern;

procedure sw(in grs2: reg32, inline offset: int12, in grs1: reg32)
    {:instruction Ins32(SW(grs2, offset, grs1))}
    modifies
        heap; flat;
    requires
        heap_w32_ptr_valid(heap, uint32_addi(grs1, offset));
    ensures
        heap_w32_ptr_valid(old(heap), uint32_addi(grs1, offset));
        heap == heap_w32_write(old(heap), uint32_addi(grs1, offset), grs2);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    let new_mem := sw_correct(old(this), @grs2, offset, @grs1, uint32_addi(grs1, offset));
    this := this.(mem := new_mem);
}

procedure add(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(ADD(dst, src1, src2))}
    ensures
        dst == uint32_add(old(src1), old(src2));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure addi(inout dst: reg32, in src1: reg32, inline imm: int12)
    {:instruction Ins32(ADDI(dst, src1, imm))}
    ensures
        dst == uint32_addi(old(src1), imm);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure sub(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(SUB(dst, src1, src2))}
    ensures
        dst == uint32_sub(old(src1), old(src2));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure and(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(AND(dst, src1, src2))}
    ensures
        dst == uint32_and(old(src1), old(src2));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure andi(inout dst: reg32, in src1: reg32, inline imm: int12)
    {:instruction Ins32(ANDI(dst, src1, imm))}
    ensures
        dst == uint32_andi(old(src1), imm);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure xori(inout dst: reg32, in src1: reg32, inline imm: int12)
    {:instruction Ins32(XORI(dst, src1, imm))}
    ensures
        dst == uint32_xori(old(src1), imm);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure csrrs(inout grd: reg32, inline csr: uint12, in grs1: reg32)
    {:instruction Ins32(CSRRS(grd, csr, grs1))}
    requires @grs1 == GPR(0);
    requires csr == 0x7c0 || csr == 0x7c1;
    reads fgroups;
    ensures csr == 0x7c0 ==> grd == flags_as_uint(get_fgroup(fgroups, 0));
    ensures csr == 0x7c1 ==> grd == flags_as_uint(get_fgroup(fgroups, 1));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure slli(inout dst: reg32, in src1: reg32, inline imm: uint5)
    {:instruction Ins32(SLLI(dst, src1, imm))}
    ensures
        dst == uint32_ls(old(src1), imm);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure srli(inout dst: reg32, in src1: reg32, inline imm: uint5)
    {:instruction Ins32(SRLI(dst, src1, imm))}
    ensures
        dst == uint32_rs(old(src1), imm);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure li(inout dst: reg32, inline imm: uint32)
    {:instruction Ins32(LI(dst, imm))}
    ensures
        dst == imm;
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure la(inout dst: reg32, inline name: string)
    {:instruction Ins32(LA(dst, name))}
    requires
        symbols?[name];
    reads
        symbols;
    ensures
        symbols == old(symbols);
        dst == symbols[name];
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure nop()
    {:instruction Ins32(NOP)}
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure unimp()
    {:instruction Ins32(UNIMP)}
    requires
        false;
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_add(inout dst: reg256, in src1: reg256, in src2: reg256, inline shift: shift_t, inline which_group: uint1)
    {:instruction Ins256(BN_ADD(dst, src1, src2, shift, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_addc(old(src1), old(src2), shift, false);
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_addc(inout dst: reg256, in src1: reg256, in src2: reg256, inline shift: shift_t, inline which_group: uint1)
    {:instruction Ins256(BN_ADDC(dst, src1, src2, shift, which_group))}
    modifies
        fgroups;
    ensures
        let cin := old(get_fgroup(fgroups, which_group).cf) in 
        let result := otbn_addc(old(src1), old(src2), shift, cin) in
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_addi(inout dst: reg256, in src: reg256, inline imm: uint10, inline which_group: uint1)
    {:instruction Ins256(BN_ADDI(dst, src, imm, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_addc(old(src), imm, SFT_DFT, false) in
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_addm(inout dst: reg256, in src1: reg256, in src2: reg256)
    {:instruction Ins256(BN_ADDM(dst, src1, src2))}
    reads
        wmod;
    ensures
        dst == otbn_addm(old(src1), old(src2), old(wmod));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}
    
procedure bn_subm(inout dst: reg256, in src1: reg256, in src2: reg256)
    {:instruction Ins256(BN_SUBM(dst, src1, src2))}
    reads
        wmod;
    ensures
        dst == otbn_subm(old(src1), old(src2), old(wmod));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_xor(inout dst: reg256, in src1: reg256, in src2: reg256, inline shift: shift_t, inline which_group: uint1)
    {:instruction Ins256(BN_XOR(dst, src1, src2, shift, which_group))}
    modifies
        fgroups;
    ensures
        let cin := old(get_fgroup(fgroups, which_group).cf);
        let result := otbn_xor(old(src1), old(src2), shift, cin);
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_sub(inout dst: reg256, in src1: reg256, in src2: reg256, inline shift: shift_t, inline which_group: uint1)
    {:instruction Ins256(BN_SUB(dst, src1, src2, shift, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_subb(old(src1), old(src2), shift, false) in
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_subb(inout dst: reg256, in src1: reg256, in src2: reg256, inline shift: shift_t, inline which_group: uint1)
    {:instruction Ins256(BN_SUBB(dst, src1, src2, shift, which_group))}
    modifies
        fgroups;
    ensures
        let bin := old(get_fgroup(fgroups, which_group).cf) in
        let result := otbn_subb(old(src1), old(src2), shift, bin) in
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_mulqacc(
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(false, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        wacc == otbn_mulqacc(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_mulqacc_z(
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(true, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        wacc == otbn_mulqacc(true, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

ghost procedure otbn_mulqacc_safe_correct_lemma(
    ghost zero: bool,
    ghost x: uint256,
    ghost qx: uint2,
    ghost y: uint256,
    ghost qy: uint2,
    ghost shift: uint2,
    ghost acc: uint256) extern;

procedure bn_mulqacc_safe(
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    requires
        otbn_mulqacc_is_safe(shift, old(wacc));
    modifies
        wacc;
    ensures
        wacc == otbn_mulqacc_safe(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
{
    // not sure why this lemma call is needed
    otbn_mulqacc_safe_correct_lemma(false, src1, qwsel1, src2, qwsel2, shift, wacc);
    bn_mulqacc(src1, qwsel1, src2, qwsel2, shift);
}

procedure bn_mulqacc_so_zero( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2, inline fg: uint1)
    {:instruction Ins256(BN_MULQACC_SO(true, dst, lower, src1, qwsel1, src2, qwsel2, shift, fg))}
    modifies
        wacc; fgroups;
    ensures
        let product := otbn_mulqacc(true, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
        let result := otbn_mulqacc_so(product, old(dst), lower, old(get_fgroup(fgroups, fg)));
        // the upper half stay in wacc
        wacc == result.new_acc
        // the lower half gets written back into dst
        && dst == result.new_dst
        // update flags
        && fgroups == update_fgroups(old(fgroups), fg, result.new_flags);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_mulqacc_so( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2, inline fg: uint1)
    {:instruction Ins256(BN_MULQACC_SO(false, dst, lower, src1, qwsel1, src2, qwsel2, shift, fg))}
    modifies
        wacc; fgroups;
    ensures
        let product := otbn_mulqacc(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
        let result := otbn_mulqacc_so(product, old(dst), lower, old(get_fgroup(fgroups, fg)));
        // the upper half stay in wacc
        wacc == result.new_acc
        // the lower half gets written back into dst
        && dst == result.new_dst
        // update flags
        && fgroups == update_fgroups(old(fgroups), fg, result.new_flags);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_mulqacc_so_safe( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2, inline fg: uint1)
    requires
        otbn_mulqacc_is_safe(shift, old(wacc));
    modifies
        wacc; fgroups;
    ensures
        let product := otbn_mulqacc_safe(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
        let result := otbn_mulqacc_so(product, old(dst), lower, old(get_fgroup(fgroups, fg)));
        // the upper half stay in wacc
        wacc == result.new_acc
        // the lower half gets written back into dst
        && dst == result.new_dst
        // update flags
        && fgroups == update_fgroups(old(fgroups), fg, result.new_flags);
{
    // not sure why this lemma call is needed
    otbn_mulqacc_safe_correct_lemma(false, src1, qwsel1, src2, qwsel2, shift, wacc);
    bn_mulqacc_so(dst, lower, src1, qwsel1, src2, qwsel2, shift, fg);
}

function mod_add(a: int, b: int, m: int): int extern;

function wwrod_offset_ptr(base: uint32, offset: int10): uint32 extern;

function bn_lid_correct(s: state,
    grd: reg32_t, grd_inc: bool,
    offset: int10, grs: reg32_t, grs_inc: bool,
    iter: iter_t) : iter_t extern;

function cur_ptr(iter :iter_t): nat extern;

procedure bn_lid_safe(
    inout grd: reg32, inline grd_inc: bool,
    inline offset: int10,
    inout grs: reg32, inline grs_inc: bool,
    ghost iter: iter_t)
    returns (ghost next_iter: iter_t)
    {:instruction Ins256(BN_LID(grd, grd_inc, offset, grs, grs_inc))}

    requires
        // note this is overly restricting 
        offset == 0;
        @grd != @grs;
        grd <= 31;
        let addr := wwrod_offset_ptr(grs, offset);
        iter_safe(iter, heap, addr);
    reads
        flat; heap;
    modifies
        wdrs;
    ensures
        grd == (if grd_inc then (old(grd) + 1) else old(grd));
        grs == (if grs_inc then (old(grs) + 32) else old(grs));
        wdrs == old(wdrs[grd := iter.buff[iter.index]]);
        iter_inv(next_iter, heap, grs + offset);
        next_iter == b256_iter_load_next(iter, grs_inc);
{
    reveal eval_code_opaque;
    this := this.(mem := old(this).mem);
    next_iter := bn_lid_correct(old(this), @grd, grd_inc,
        offset, @grs, grs_inc, iter);
}

function bn_sid_correct(gs: state, 
        grs2: reg32_t, grs2_inc: bool,
        offset: int10, grs1: reg32_t, grs1_inc: bool,
        value: uint256, iter: iter_t)
    : tuple(mem_t, iter_t) extern;

function heap_write_wword(heap: heap_t, iter: iter_t, ptr: nat, value: uint256): heap_t extern;

procedure bn_sid_safe(
    inout grs2: reg32, inline grs2_inc: bool,
    inline offset: int10,
    inout grs1: reg32, inline grs1_inc: bool,
    ghost iter: iter_t)
    returns (ghost next_iter: iter_t)
    {:instruction Ins256(BN_SID(grs2, grs2_inc, offset, grs1, grs1_inc))}

    requires
        // note this is overly restricting 
        offset == 0;
        @grs1 != @grs2;
        grs2 <= 31;
        let addr := wwrod_offset_ptr(grs1, offset);
        iter_safe(iter, heap, addr);
    reads
        wdrs;
    modifies
        heap; flat;
    ensures
        grs1 == (if grs1_inc then (old(grs1) + 32) else old(grs1));
        grs2 == (if grs2_inc then (old(grs2) + 1) else old(grs2));
        heap == heap_b256_write(old(heap), iter, wdrs[old(grs2)]);
        iter_inv(next_iter, heap, grs1 + offset);
        next_iter == b256_iter_store_next(iter, wdrs[old(grs2)], grs1_inc);
{
    reveal eval_code_opaque;
    let value := wdrs[old(grs2)];
    let result := bn_sid_correct(old(this), @grs2, grs2_inc,
        offset, @grs1, grs1_inc, value, iter);
    this := this.(mem := fst(result));
    next_iter := snd(result);
}

procedure bn_mov(inout dst: reg256, in src: reg256)
    {:instruction Ins256(BN_MOV(dst, src))}
    ensures
        dst == old(src);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

// note that implicitly we are not using x0/x1 for inout 
procedure bn_movr(inout grd: reg32, inline grd_inc: bool, inout grs: reg32, inline grs_inc: bool)
    {:instruction Ins256(BN_MOVR(grd, grd_inc, grs, grs_inc))}
    requires
        @grd != @grs;
        grd <= 31;
        grs <= 31;
    modifies
        wdrs;
    ensures
        grd == (if grd_inc then (old(grd) + 1) else old(grd));
        grs == (if grs_inc then (old(grs) + 1) else old(grs));
        wdrs == old(wdrs[grd := wdrs[grs]]);
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}

procedure bn_sel(inout dst: reg256, in src1: reg256, in src2: reg256, inline which_group: uint1, inline flag: uint2)
    {:instruction Ins256(BN_SEL(dst, src1, src2, which_group, flag))} 
    reads
        fgroups;
    ensures
        dst == (if old(get_flag(fgroups, which_group, flag)) then old(src1) else old(src2));
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}
    
procedure comment(inline comment: string)
    {:instruction Comment(comment)}
{
    reveal eval_code_opaque;
    reveal valid_state_opaque;
    this := this.(mem := old(this).mem);
}
    
#verbatim
} // end module vt_decls
#endverbatim
