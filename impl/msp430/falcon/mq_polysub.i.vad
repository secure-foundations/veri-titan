include "mq_arith.i.vad"

#verbatim
include "mq_arith.i.dfy"

module mq_polysub {

import opened integers

import opened msp_machine
import opened msp_decls
import opened msp_vale
import opened mem
import opened stack

import opened bv16_op_s
import opened mq_arith_lemmas

import opened pow2_s
import opened falcon_512_i

import opened mq_arith_impl
#endverbatim

type pow2_t: Type(0) extern;
function operator(.full) (p :pow2_t): nat extern;
function operator(.exp) (p :pow2_t): nat extern;
const N: pow2_t extern; 

function fvar_iter_inv(heap: heap_t, iter: iter_t, address: int, index: int): bool extern;
    
function poly_sub_loop_inv(f_new: seq(uint16), f: seq(uint16), g: seq(uint16), i: nat): bool extern;
    
function poly_sub_loop_correct(f_new: seq(uint16), f_old: seq(uint16), f_orig:seq(uint16), g: seq(uint16), i: nat) : void extern;

function b16_iter_inv(heap: heap_t, iter: iter_t) : bool extern;


//procedure poly_sub_save_regs()
//    requires
//        in_stack_addr_range(sp);
//        in_stack_addr_range(sp - 16);
//
//    modifies
//        sp; mem; flat;
//    reads
//        ra; s0; s1; s2;
//    ensures
//        sp == old(sp) - 16;
//        mem == stack_push_batch(old(mem), old(flat),
//            seq(s2, s1, s0, ra));
//        stack_depth(mem) == stack_depth(old(mem)) + 1;
//{
//    push_frame((-16));
//    sw_stack(ra, 12);
//    sw_stack(s0, 8);
//    sw_stack(s1, 4);
//    sw_stack(s2, 0);
//
//    let target := stack_push_batch(old(mem), old(flat),
//        seq(s2, s1, s0, ra));
//    assert top_frame(target.frames) == top_frame(mem.frames);
//}
//    
//procedure poly_sub_restore_regs()
//    requires
//        stack_depth(mem) >= 2;
//        seq_len(top_frame(mem.frames).content) == 4;
//
//    reads
//        flat;
//    modifies
//        mem; sp;
//    modifies
//        s0; s1; s2; ra;
//    ensures
//        sp == old(sp) + 16;
//        flat == old(flat);
//        mem == stack_pop_frame(old(mem), flat);
//    ensures
//        let frame := top_frame(old(mem.frames)).content;
//        ra == frame[3];
//        s0 == frame[2];
//        s1 == frame[1];
//        s2 == frame[0];
//{
//    lw_stack(ra, 12);
//    lw_stack(s0, 8);
//    lw_stack(s1, 4);
//    lw_stack(s2, 0);
//    pop_frame(16);
//}
    
procedure poly_sub_loop_body(ghost f_orig: seq(uint16), ghost iter_f: iter_t,
    ghost iter_g: iter_t,
    ghost i: nat)

    returns (ghost iter_f': iter_t, ghost iter_g': iter_t)
    lets 
        Q      @= r9;
        x      @= r11;
        y      @= r12;
        r      @= r13;
        tmp    @= r14;
        ptr_f  @= r5; 
        ptr_g  @= r6; 
 
    requires
        Q == 12289;

        0 <= i < N.full;    

        iter_safe(iter_f, heap, ptr_f);
        iter_safe(iter_g, heap, ptr_g);
        fvar_iter_inv(heap, iter_f, ptr_f, i);
        fvar_iter_inv(heap, iter_g, ptr_g, i);

        iter_f.base_ptr != iter_g.base_ptr;
        poly_sub_loop_inv(iter_f.buff, f_orig, iter_g.buff, i);
    
    reads
        Q;
    modifies
        x; y; r; tmp; ptr_f; ptr_g;
        flags; heap; mem;
    ensures
        iter_f'.base_ptr == iter_f.base_ptr;
        iter_g'.base_ptr == iter_g.base_ptr;

        cur_ptr(iter_f') == ptr_f;
        cur_ptr(iter_g') == ptr_g;

        iter_g'.buff == iter_g.buff;

        fvar_iter_inv(heap, iter_f', ptr_f, i+1);
        fvar_iter_inv(heap, iter_g', ptr_g, i+1);

        mem == old(mem).(heap := heap);
        heap == old(heap)[iter_f.base_ptr := heap[iter_f.base_ptr]];
    
        poly_sub_loop_inv(iter_f'.buff, f_orig, iter_g.buff, i+1);

{
    lw(ptr_f, false, x, iter_f);
    iter_g' := lw_iter(ptr_g, true, y, iter_g);

    mq_sub();

    iter_f' := sw_iter(ptr_f, true, r, iter_f);

    poly_sub_loop_correct(iter_f'.buff, iter_f.buff, f_orig, iter_g.buff, i);
}

/* f' == f - g */
procedure poly_sub(
    ghost iter_f: iter_t,
    ghost iter_g: iter_t)
    returns (ghost iter_f': iter_t, ghost iter_g': iter_t)

    lets 
        Q      @= r9;
        end_f  @= r10;
        x      @= r11;
        y      @= r12;
        r      @= r13;
        tmp    @= r14;
        ptr_f  @= r5; 
        ptr_g  @= r6; 

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 16);
    
        Q == 12289;
        N.full == 512;
    
    requires
        seq_len(iter_g.buff) == 512;
        
        iter_safe(iter_f, heap, ptr_f);
        iter_safe(iter_g, heap, ptr_g);
        fvar_iter_inv(heap, iter_f, ptr_f, 0);
        fvar_iter_inv(heap, iter_g, ptr_g, 0);

        iter_f.base_ptr != iter_g.base_ptr;
    
    reads
        Q;

    modifies
        x; y; r; tmp; ptr_f; ptr_g; end_f;
        flags; heap; mem;

    ensures
        // TODO: Register promises
    
    ensures
        mem == old(mem).(heap := heap);
        iter_f'.base_ptr == iter_f.base_ptr;
    
        fvar_iter_inv(heap, iter_f.(buff := iter_f'.buff), ptr_f, 0);
        heap == old(heap)
            [iter_f'.base_ptr := heap[iter_f'.base_ptr]];
    
    ensures
        seq_len(iter_f'.buff) == 512;
        poly_sub_loop_inv(iter_f'.buff, iter_f.buff, iter_g.buff, N.full);
{
    //poly_sub_save_regs();
    ghost var old_mem := mem;

    mov_w(ptr_f, end_f);
    add_w_imm(1024, end_f);
    
    iter_f':= iter_f;
    iter_g':= iter_g;
    ghost var i:nat := 0;
    
    while (ptr_f < end_f) // 512 iterations
        invariant
            iter_g.buff == iter_g'.buff;

            ptr_f < end_f ==> iter_safe(iter_f', heap, ptr_f);
            ptr_f < end_f ==> iter_safe(iter_g', heap, ptr_g);
            fvar_iter_inv(heap, iter_f', ptr_f, i);
            fvar_iter_inv(heap, iter_g', ptr_g, i);

            poly_sub_loop_inv(iter_f'.buff, iter_f.buff, iter_g.buff, i);

            iter_f'.base_ptr == iter_f.base_ptr;

            mem == old_mem.(heap := heap);
            heap == old(heap)[iter_f.base_ptr := heap[iter_f'.base_ptr]];
        invariant
            Q == 12289;
            0 <= i <= N.full;
            (ptr_f - old(ptr_f)) == 2*i;

            iter_f'.base_ptr != iter_g'.base_ptr;
    
            end_f == 1024 + iter_f.base_ptr;
    decreases (N.full - i);
    {
        iter_f', iter_g' := poly_sub_loop_body(iter_f.buff, iter_f', iter_g', i);
        i := i + 1;
    }
    assert i == 512;
    
    //poly_sub_restore_regs();
}
        
#verbatim
}
#endverbatim
