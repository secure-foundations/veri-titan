include "msp_mq_arith.i.vad"
include "../msp_reg_save.i.vad"

#verbatim
include "msp_mq_arith.i.dfy"
include "../msp_reg_save.i.dfy"

module msp_mq_fntt {

import opened integers

import opened msp_machine
import opened msp_decls
import opened msp_vale
import opened mem
import opened stack

import opened bv16_op_s
import opened mq_arith_lemmas
import opened DivMod

import opened pow2_s
import opened falcon_512_i

import opened msp_mq_arith
import opened msp_reg_save

#endverbatim

function elems_iter_inv(heap: heap_t, iter: iter_t, address: int, index: int): bool extern;

function as_elems(s: seq(uint16)): seq(uint16) extern;

function rev_mixed_powers_mont_table(): seq(uint16) extern;
function rev_mixed_powers_mont_table_lemma(t: pow2_t, d: pow2_t, j: nat): void extern;
function rev_mixed_powers_mont_x_value(i: nat, d: pow2_t): (r: uint16) extern;

type floop_view: Type(0) extern;
function operator(.hsize) (p :floop_view): pow2_t extern;
function build_floop_view(a: seq(uint16), d: pow2_t): floop_view extern;
function forward_lsize(v: floop_view): pow2_t extern;

function block_size(c: pow2_t): pow2_t extern;

function pow2_t_cons(n: nat, exp: nat): pow2_t extern;
function forward_j_loop_inv(a: seq(uint16), hcount: pow2_t, j: nat, u: nat, view: floop_view): bool extern;
function forward_j_loop_inv_pre_lemma(a: seq(uint16), hcount: pow2_t, view: floop_view): void extern;
function forward_j_loop_inv_post_lemma(a: seq(uint16), hcount: pow2_t, j: nat, u: nat, view: floop_view): void extern;

function forward_s_loop_inv(a: seq(uint16), d: pow2_t, j: nat, bi: nat, view: floop_view): bool extern;
function forward_s_loop_inv_pre_lemma(a: seq(uint16), d: pow2_t, j: nat, t: pow2_t, u: nat, view: floop_view): void extern;
function forward_s_loop_inv_post_lemma(a: seq(uint16), d: pow2_t, j: nat, u: nat, bi: nat, view: floop_view): void extern;
function forward_s_loop_index_lemma(a: seq(uint16), d: pow2_t, j: nat, s: uint16, bi: nat, view: floop_view): (gs: nat) extern;
function forward_s_loop_update(a: seq(uint16), a': seq(uint16), d: pow2_t, j: nat, bi: nat, s: nat, e: uint32, o: uint32, view: floop_view): bool extern;
function forward_s_loop_inv_peri_lemma(a: seq(uint16), a': seq(uint16), d: pow2_t, j: nat, bi: nat, s: nat, e: uint32, o: uint32, view: floop_view): void extern;

function forward_ntt_eval_all(a: seq(uint16), coeffs: seq(uint16)): bool extern;
function forward_t_loop_inv(a: seq(uint16), d: pow2_t, c: seq(uint16)): bool extern;
function forward_t_loop_inv_pre_lemma(c: seq(uint16)): void extern;
function forward_t_loop_inv_post_lemma(a: seq(uint16), one: pow2_t, c: seq(uint16)): void extern;

procedure forward_s_loop_inner(
    ghost iter_a: iter_t,
    ghost gd: pow2_t,
    ghost bi: nat,
    ghost view: floop_view)
    returns (ghost iter_a': iter_t)
{:frame false}
    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 12);

    lets
        d         @= r4;
        t         @= r5;
        j         @= r6;
        s         @= r7;
        pd        @= r9; 
        u         @= r10; 

        ae_ptr    @= r8;
        a_base    @= r12;
        // p_base    @= r14; 
        w         @= r13;
        // s_end     @= r15;
        ao_ptr    @= r15;

    requires
        pd == 2 * d;
        d == gd.full;
        w == mqmul(rev_mixed_powers_mont_x_value(2 * j, gd), R);
        u == j * (2 * d);
        s == (bi + u) * 2;
        // s_end == (d + u) * 2;

    requires
        elems_iter_inv(heap, iter_a, a_base, 0);
        forward_s_loop_inv(iter_a.buff, gd, j, bi, view);
        bi < gd.full;

    ensures
        sp == old(sp);
        d == old(d);
        t == old(t);
        j == old(j);
        s == old(s);
        pd == old(pd);
        u == old(u);

    ensures
        elems_iter_inv(heap, iter_a', old(a_base), 0);
        iter_a'.base_ptr == iter_a.base_ptr;

    ensures
        mem == old(mem).(heap := heap);
        heap == old(heap)[iter_a'.base_ptr := heap[iter_a'.base_ptr]];
    
    ensures
        forward_s_loop_inv(iter_a'.buff, gd, j, bi+1, view);
{
    mov_w(s, ao_ptr);
    add_w(pd, ao_ptr);
    mov_w(a_base, ae_ptr);
    
    let gs := forward_s_loop_index_lemma(iter_a.buff, gd, j, s, bi, view);
    add_w(a_base, ao_ptr);

    iter_a' := lw_iter(ao_ptr, false, r12, iter_a.(index := gs + d));

    let a_e := iter_a.buff[gs];
    let a_o := iter_a.buff[gs + d];

    montymul(a_o, w);
    let x := r12;

    add_w(s, ae_ptr);
    iter_a' := lw_iter(ae_ptr, false, r11, iter_a.(index := gs));

    mq_sub();

    // assert r13 == mqsub(a_e, x);
    let o := r13;
    iter_a' := sw_iter(r13, ao_ptr, iter_a'.(index := gs + d));

    mq_add();
    // assert r13 == mqadd(a_e, x);
    let e := r13;
    iter_a' := sw_iter(r13, ae_ptr, iter_a'.(index := gs));
    // assert e == mqadd(a_e, montmul(a_o, old(w)));
    // assert o == mqsub(a_e, montmul(a_o, old(w)));
    // assert forward_s_loop_update(iter_a.buff, iter_a'.buff, gd, j, bi, gs, e, o, view);
    forward_s_loop_inv_peri_lemma(iter_a.buff, iter_a'.buff, gd, j, bi, gs, e, o, view);
    iter_a' := iter_a'.(index := 0);
}

procedure forward_s_loop (
    ghost iter_a: iter_t,
    ghost gd: pow2_t,
    ghost bi: nat,
    ghost view: floop_view)
    returns (ghost iter_a': iter_t)
{:frame false}
    lets
        d         @= r4;
        t         @= r5;
        j         @= r6;
        s         @= r7;
        pd        @= r9; 
        u         @= r10; 

        ae_ptr    @= r8;
        a_base    @= r12;
        p_base    @= r14; 
        w         @= r13;
        s_end     @= r15;

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 20);

    requires
        pd == 2 * d;
        d == gd.full;
        w == mqmul(rev_mixed_powers_mont_x_value(2 * j, gd), R);
        u == j * (2 * d);
        s == (bi + u) * 2;
        // s_end == (d + u) * 2;

    requires
        elems_iter_inv(heap, iter_a, a_base, 0);
        forward_s_loop_inv(iter_a.buff, gd, j, bi, view);
        bi < gd.full;

    ensures
        sp == old(sp);
        d == old(d);
        t == old(t);
        j == old(j);
        s == old(s);
        pd == old(pd);
        u == old(u);
        a_base == old(a_base);
        p_base == old(p_base); 
        w == old(w);
        s_end == old(s_end);

    ensures
        elems_iter_inv(heap, iter_a', old(a_base), 0);
        iter_a'.base_ptr == iter_a.base_ptr;

    ensures
        mem == old(mem).(heap := heap);
        heap == old(heap)[iter_a'.base_ptr := heap[iter_a'.base_ptr]];
    
    ensures
        forward_s_loop_inv(iter_a'.buff, gd, j, bi+1, view);
{
    save_r12__r15();
    iter_a' := forward_s_loop_inner(iter_a, gd, bi, view);
    popm_w(4, r15);
    assert frames == old(frames);
}

procedure forward_j_loop(
    ghost iter_a: iter_t,
    ghost iter_p: iter_t,
    ghost gt: pow2_t,
    ghost gd: pow2_t,
    ghost view: floop_view)
    returns (ghost iter_a': iter_t)
{:frame false}

    lets
        d         @= r4;
        t         @= r5;
        j         @= r6;
        s         @= r7;
        pd        @= r9; 
        u         @= r10; 
        w_ptr     @= r11; 
        a_base    @= r12;
        p_base    @= r14; 
        w         @= r13;
        s_end     @= r15;

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 20);

    requires
        t == gt.full;
        pd == 2 * d;
        d == gd.full;

    requires
        elems_iter_inv(heap, iter_a, a_base, 0);
        elems_iter_inv(heap, iter_p, p_base, 0);
        a_base != p_base;

    requires
        forward_j_loop_inv(iter_a.buff, gd, j, u, view);
        iter_p.buff == rev_mixed_powers_mont_table();
        j < forward_lsize(view).full;
        gt == forward_lsize(view);

    ensures
        sp == old(sp);
        t == gt.full;
        pd == 2 * d;
        d == gd.full;
        j == old(j);
        p_base == old(p_base);

    ensures
        elems_iter_inv(heap, iter_a', a_base, 0);
        elems_iter_inv(heap, iter_p, p_base, 0);
        iter_p.buff == rev_mixed_powers_mont_table();
        iter_a'.base_ptr == iter_a.base_ptr;

    ensures
        mem == old(mem).(heap := heap);
        heap == old(mem).heap[a_base := heap[a_base]];

    ensures
        forward_j_loop_inv(iter_a'.buff, gd, j + 1, u, view);
{
    iter_a' := iter_a;
    mov_w(t, w_ptr);
    add_w(j, w_ptr);
    add_w(w_ptr, w_ptr);

    mov_w(u, s);
    add_w(s, s);

    mov_w(pd, s_end);
    add_w(s, s_end);

    forward_s_loop_inv_pre_lemma(iter_a'.buff, gd, j, gt, u, view);
    add_w(p_base, w_ptr);

    ghost var iter_p' := iter_p.(index := t + j);
    iter_p' := lw_iter(w_ptr, false, w, iter_p');

    assert w == rev_mixed_powers_mont_table()[t + j];
    ghost var bi :nat := 0;

    while (s < s_end)
        invariant
            sp == old(sp);
            t == gt.full;
            pd == 2 * d;
            d == gd.full;
            j == old(j);
            u == old(u);
            a_base == old(a_base);
            p_base == old(p_base);

            w == rev_mixed_powers_mont_table()[t + j];
            s == (bi + u) * 2;
            s_end == (d + u) * 2;

        invariant
            elems_iter_inv(heap, iter_a', a_base, 0);
            iter_a'.base_ptr == a_base;
            elems_iter_inv(heap, iter_p, p_base, 0);
            iter_p.buff == rev_mixed_powers_mont_table();

        invariant        
            mem == old(mem).(heap := heap);
            heap == old(mem).heap[a_base := heap[a_base]];

        invariant
            forward_s_loop_inv(iter_a'.buff, gd, j, bi, view);

        decreases
            s_end - s;
    {
        iter_a' := forward_s_loop(iter_a', gd, bi, view);
        add_w_imm(2, s);
        bi := bi + 1;
        assert heap[p_base] == old(heap)[p_base];
    }

    forward_s_loop_inv_post_lemma(iter_a'.buff, gd, j, u, bi, view);
    add_w(pd, u);
}

procedure fntt_t_loop(
    ghost iter_a: iter_t,
    ghost iter_p: iter_t,
    ghost gt: pow2_t,
    ghost gd: pow2_t,
    ghost coeffs: seq(uint16))

returns (ghost iter_a': iter_t)
{:frame false}
    lets
        d         @= r4;
        t         @= r5;
        j         @= r6;
        s         @= r7;
        pd        @= r9; 
        u         @= r10; 
        a_base    @= r12;
        p_base    @= r14; 

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 20);

    requires
        t == gt.full;
        pd == 2 * d;
        d == gd.full;

    requires
        elems_iter_inv(heap, iter_a, a_base, 0);
        elems_iter_inv(heap, iter_p, p_base, 0);
        iter_a.base_ptr != iter_p.base_ptr;

    requires
        0 <= gd.exp < N.exp;
        gt == block_size(pow2_double(gd));
        forward_t_loop_inv(iter_a.buff, pow2_double(gd), coeffs);
        iter_p.buff == rev_mixed_powers_mont_table();

    ensures
        elems_iter_inv(heap, iter_a', a_base, 0);
        elems_iter_inv(heap, iter_p, p_base, 0);
        iter_a'.base_ptr == iter_a.base_ptr;

    ensures
        sp == old(sp);
        t == old(t);
        pd == old(pd);
        d == old(d);
        a_base == old(a_base);

    ensures
        mem == old(mem).(heap := heap);
        heap == old(mem).heap[a_base := heap[a_base]];

    ensures
        forward_t_loop_inv(iter_a'.buff, gd, coeffs);
{
    mov_w_imm(0, j);
    mov_w_imm(0, u);

    ghost var view := build_floop_view(as_elems(coeffs), gd);

    iter_a' := iter_a;

    forward_j_loop_inv_pre_lemma(iter_a'.buff, gd, view);

    while (j < t)
        invariant
            sp == old(sp);
            t == gt.full;
            pd == 2 * d;
            d == gd.full;
            a_base == old(a_base);
            p_base == old(p_base);

        invariant
            elems_iter_inv(heap, iter_a', a_base, 0);
            elems_iter_inv(heap, iter_p, p_base, 0);
            iter_a'.base_ptr == iter_a.base_ptr;
            iter_a'.base_ptr != iter_p.base_ptr;

        invariant
            mem == old(mem).(heap := heap);
            heap == old(mem).heap[a_base := heap[a_base]];

        invariant
            forward_j_loop_inv(iter_a'.buff, gd, j, u, view);

        decreases
            t - j;
    {
        iter_a' := forward_j_loop(iter_a', iter_p, gt, gd, view);
        add_w_imm(1, j);
    }

    forward_j_loop_inv_post_lemma(iter_a'.buff, gd, j, u, view);
 }

procedure fntt(
    ghost iter_a: iter_t,
    ghost iter_p: iter_t)

returns (ghost iter_a': iter_t)

{:noInline}
{:frame false}
    lets
        d         @= r4;
        t         @= r5;
        j         @= r6;
        s         @= r7;
        // i         @= r8;
        pd        @= r9; 

        a_base    @= r12; 
        p_base    @= r14; 

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 34);

    requires
        elems_iter_inv(heap, iter_a, a_base, 0);
    requires
        symbols?["rev_mixed_powers_mont_table"];
    requires
        elems_iter_inv(heap, iter_p,
            load_symbol(mem, "rev_mixed_powers_mont_table"), 0);
    requires
        iter_p.buff == rev_mixed_powers_mont_table();
    requires
        iter_a.base_ptr != iter_p.base_ptr;
    
    ensures
        sp == old(sp);
        r4 == old(r4);
        r5  == old(r5);
        r6  == old(r6);
        r7 == old(r7);
        r8 == old(r8);
        r9 == old(r9);
        r10 == old(r10);
        a_base == old(a_base);

    ensures
        elems_iter_inv(heap, iter_a', a_base, 0);
        iter_a'.base_ptr == iter_a.base_ptr;

    ensures
        mem == old(mem).(heap := heap);
        heap == old(mem).heap[a_base := heap[a_base]];

    ensures
        forward_ntt_eval_all(iter_a'.buff, iter_a.buff);
{
    iter_a' := iter_a;

    save_r4__r10();
    
    let sp0 := sp;
    let mem0 := mem;

    mov_w_imm(512, d);
    mov_w_imm(1, t);
    lw_symbol("rev_mixed_powers_mont_table", p_base);

    forward_t_loop_inv_pre_lemma(iter_a.buff);
    let coeffs := iter_a.buff;

    ghost var gd := N;
    ghost var i :int := 9;
    ghost var gt := pow2(0);
    pow2_basics_lemma(gt);

    while (t < 512)
        invariant
            sp == sp0;
            t == gt.full;
            d == gd.full;
            a_base == old(a_base);

        invariant
            elems_iter_inv(heap, iter_a', a_base, 0);
            elems_iter_inv(heap, iter_p, p_base, 0);
            iter_a'.base_ptr == a_base;
            iter_a'.base_ptr != p_base;

        invariant
            mem == mem0.(heap := heap);
            heap == mem0.heap[a_base := heap[a_base]];

        invariant
            gd.exp == i;
            0 <= gd.exp <= N.exp;
            gt == block_size(gd);
            forward_t_loop_inv(iter_a'.buff, gd, coeffs);

        decreases
            i;
    {
        mov_w(d, pd);
        gd := half(d, gd);

        iter_a' := fntt_t_loop(iter_a', iter_p, gt, gd, coeffs);

        gt := double(t, gt);
        i := i - 1;
    }

    forward_t_loop_inv_post_lemma(iter_a'.buff, gd, coeffs);

    popm_w(7, r10);
    iter_a' := iter_a'.(index := 0);
    assert frames == old(frames);
}

#verbatim
}
#endverbatim