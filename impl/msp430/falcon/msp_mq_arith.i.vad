include "../msp_mul.i.vad"

#verbatim

include "../../../../glue/msp430/falcon/mq_arith_lemmas.dfy"
include "../msp_mul.i.dfy"

module msp_mq_arith {

import opened msp_machine
import opened msp_decls
import opened msp_vale
import opened mem
import opened stack
import opened bv16_op_s
import opened integers
import opened mq_arith_lemmas
import opened bv16_mm_lemmas
import opened DivMod
import opened falcon_512_i

import opened pow2_s
// import opened msp_mul

#endverbatim

type pow2_t: Type(0) extern;
function pow2(exp: int): pow2_t extern;
function operator(.full) (p :pow2_t): nat extern;
function operator(.exp) (p :pow2_t): nat extern;
function pow2_half(p: pow2_t): pow2_t extern;
function pow2_double(p: pow2_t): pow2_t extern;
function pow2_basics_lemma(p: pow2_t): void extern;

function cond_set_Q_lemma(flags0: flags_t, mask: uint16, flags1: flags_t): void extern;
function lemma_mq_add_correct(sum: uint16, mask: uint16, r: uint16, x: uint16, y: uint16) : void extern;
function to_int16(i: uint16): int16 extern;

function dw_add_lemma(x_lh: uint16, x_uh: uint16, y_lh: uint16, y_uh: uint16, carry: uint1): dw_view_t extern;
function dw_add_is_safe(x_lh: uint16, x_uh: uint16, y_lh: uint16, y_uh: uint16): bool extern;

function montmul(a: nat, b: nat): uint16 extern;
function mqmul(a: nat, b: nat): nat extern;
function mqsub(a: nat, b: nat): uint32 extern;
function mqadd(a: nat, b: nat): uint32 extern;

const N: pow2_t extern;
const R: nat extern;

procedure cond_set_Q(inout rd: reg)
    modifies
        flags;
    ensures 
        (old(flags.cf) == 1) ==> rd == 12289;
        (old(flags.cf) == 0) ==> rd == 0;
{
    clr_w(rd);
    let flags0 := flags;
    subc_w(rd, rd);
    let mask := rd;
    let flags1 := flags;
    and_w_imm(12289, rd);
    cond_set_Q_lemma(flags0, mask, flags1);
}

procedure cond_add_Q(inout rd: reg, inout rt: reg)
    requires
        @rd != @rt;
    modifies
        flags;
    ensures 
        (old(flags.cf) == 1) ==> rd == fst(msp_add(old(rd), 12289));
        (old(flags.cf) == 0) ==> rd == old(rd);
{
    cond_set_Q(rt);
    add_w(rt, rd);
}

// procedure check_int16_sign(inout rd: reg)
//     modifies
//         flags;
//     ensures
//         to_int16(old(rd)) < 0 <==> flags.cf == 1;
// {
//     rla_w(rd);
// }

function rs1_lemma(x: uint16): void extern;

function pow2_increases_lemma(n: pow2_t, n': pow2_t): void extern;

procedure half(inout dst: reg, ghost p: pow2_t)
    returns (ghost p': pow2_t)
    requires
        dst == p.full;
        (512 >= p.full >= 2) || (9 >= p.exp >= 1);
    modifies
        flags;
    ensures
        dst == old(dst) / 2;
        dst == p'.full;
        p' == pow2_half(p);
{
    rs1_lemma(dst);
    pow2_increases_lemma(p, N);
    rra_w(dst);
    p' := pow2_half(p);
}

procedure double(inout dst: reg, ghost p: pow2_t)
    returns (ghost p': pow2_t)
    requires
        dst == p.full;
        (512 >= p.full >= 1) || (9 >= p.exp >= 0);
    modifies
        flags;
    ensures
        dst == old(dst) * 2;
        dst == p'.full;
        p' == pow2_double(p);
{
    add_w(dst, dst);
    pow2_increases_lemma(p, N);
    p' := pow2_double(p);
}

procedure mq_add() 
    lets 
        x    @= r11;
        y    @= r12;
        r    @= r13;
        tmp  @= r14;
    
    requires
        x < 12289;
        y < 12289;
    
    reads
        x; y;

    modifies
        flags; r; tmp;
    
    ensures
        r == mqadd(old(x), old(y));
{
    mov_w(y, tmp);    // tmp <- y
    add_w_imm((-12289), tmp); // tmp <- y - Q
    add_w(x, tmp);    // tmp <- y - Q + x
    // If we're still negative, create a mask of 0xFFFF.  Else, use 0.
    mov_w(tmp, r);     // r <- tmp
    rla_w(r);          // carry <- MSB of r
    cond_set_Q(r);
    add_w(tmp, r);     // r <- (Q & mask) + y - Q + x
}

procedure mq_sub() 
    lets 
        x    @= r11;
        y    @= r12;
        r    @= r13;
        tmp  @= r14;

    requires
        x < 12289;
        y < 12289;

    reads
        x; y;

    modifies
        flags; r; tmp;
    
    ensures
        r == mqsub(old(x), old(y));
{
    mov_w_imm((-1), r); // r <- 0xFFFF
    mov_w(x, tmp);    // tmp <- x
    sub_w(y, tmp);    // tmp <- x - y
    cond_set_Q(r);
    add_w(tmp, r);     // r <- (Q & mask) + x - y 
}

function general_dw_add_lemma(xs: seq(uint16), ys: seq(uint16), zs: seq(uint16), c1: uint1, c2: uint1): uint32_view_t extern;
function build_dw_view(lh: uint16, uh: uint16): uint32_view_t extern;
function dw_view_lemma(v: uint32_view_t): void extern;

procedure dw_add(in rsl: reg, in rsh: reg, inout rdl: reg, inout rdh: reg, ghost sum: uint32_view_t)
    returns (ghost sum': uint32_view_t)
    requires
        @rdl != @rsl;
        @rdl != @rsh;
        @rdl != @rdh;

        @rdh != @rsl;
        @rdh != @rsh;
    requires
        sum.lh == rdl;
        sum.uh == rdh;
    modifies
        flags;
    ensures
        sum'.lh == rdl;
        sum'.uh == rdh;
        sum'.full == to_nat(seq(rdl, rdh));
        sum'.full + flags.cf * 0x100000000 == 
            to_nat(seq(old(rsl), old(rsh))) + sum.full;
{
    dw_view_lemma(sum);
    let x_lh := rsl;
    let x_uh := rsh;
    let y_lh := rdl;
    let y_uh := rdh;

    add_w(rsl, rdl);
    let c1 := flags.cf;
    addc_w(rsh, rdh);
    let c2 := flags.cf;

    let z_lh := rdl;
    let z_uh := rdh;

    sum' := general_dw_add_lemma(seq(x_lh, x_uh), seq(y_lh, y_uh),
        seq(z_lh, z_uh), c1, c2);
}
function lemma_montymul_correct(x: nat, y: nat, xy_lh: uint16, xy_uh: uint16, Q0Ixy:nat, sum: uint32_view_t, partial_lh: uint16, partial_uh: uint16, partial_uh_xy_uh:uint16, m: uint16, flags: flags_t, r:uint16) : void extern;

procedure montymul(ghost x: nat, ghost y: nat)
    {:frame false}
    {:noInline}

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 12);

    requires
        x == r12;
        y == r13;
    
    requires
        x < 12289;
        y < 12289;

    ensures
        sp == old(sp);
        r4 == old(r4);
        r5 == old(r5);
        r6 == old(r6);
        r7 == old(r7);
        r8 == old(r8);
        r9 == old(r9); 
        r10 == old(r10); 
        r11 == old(r11);
        r13 == old(r13);
        r14 == old(r14);
        r15 == old(r15);

    ensures
        mem == old(mem);

    ensures
        r12 == montmul(x, y);
{
    pushm_w(6, r10);

    mov_w(r13, r8);
    mov_w(r14, r7);
    mov_w(r15, r6);
    mov_w(r11, r5);

    mov_w(r13, r14);
    clr_w(r13);
    clr_w(r15);

    builtin__mspabi_mpyl();

    mov_w(r12, r9);
    mov_w(r13, r10);

    let xy_lh := r9;
    let xy_uh := r10;

    mov_w_imm(12287, r13);
    builtin__mspabi_mpyi();

    clr_w(r13);
    mov_w_imm(12289, r14);

    builtin__mspabi_mpyl(); 

    ghost var sum := build_dw_view(r12, r13); 
    // assert to_nat(seq(r12, r13)) == mul(xy_lh, 12287) * 12289;

    dw_view_lemma(sum);
    assert sum.full == mul(xy_lh, 12287) * 12289;
    assert to_nat(seq(r9, r10)) == x * y;

    sum := dw_add(r9, r10, r12, r13, sum);
    assert sum.full + flags.cf * 0x100000000 == 
        x * y + mul(xy_lh, 12287) * 12289;

    add_w_imm((-12289), r13);
    cond_add_Q(r13, r12);
    mov_w(r13, r12);
    assume r12 == montmul(x, y);

    mov_w(r8, r13);
    mov_w(r7, r14);
    mov_w(r6, r15);
    mov_w(r5, r11);
    popm_w(6, r10);
}

#verbatim
}
#endverbatim
