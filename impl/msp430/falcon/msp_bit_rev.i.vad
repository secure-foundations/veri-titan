
#verbatim

module msp_bit_rev {

import opened integers

import opened msp_machine
import opened msp_decls
import opened msp_vale
import opened mem
import opened stack

import opened bv16_op_s
import opened mq_arith_lemmas
import opened DivMod

import opened pow2_s
import opened falcon_512_i

import opened mq_arith_impl
// import opened mq_polysub

#endverbatim

type rev_view: Type(0) extern;
function operator(.ti) (m: rev_view): nat extern;
function operator(.b) (m: rev_view): seq(uint16) extern;

function b16_iter_inv(iter: b16_iter, heap: heap_t, address: int): bool extern;

function init_unfinished(len: pow2_t): set(nat) extern;
function build_view(a: seq(uint16), i: nat, len: pow2_t): rev_view extern;
function is_bit_rev_shuffle(a: seq(uint16), b: seq(uint16), len: pow2_t): bool extern;
function bit_rev_view_init(a: seq(uint16)): rev_view extern;
function bit_rev_view_inv_peri_lemma(a: seq(uint16), next_b: seq(uint16), view: rev_view, table: seq(uint16)): rev_view extern;
function bit_rev_index_lemma(a: seq(uint16), ftable: seq(uint16), sbi: uint32, rsbi: uint32, ti: nat, a0: uint32, t0: uint32, t1: uint32): void extern;
function bit_rev_view_inv_post_lemma(a: seq(uint16), view: rev_view): void  extern;
function bit_rev_ftable_wf(table: seq(uint16)): bool extern;
function bit_rev_shuffle_inv(a: seq(uint16), view: rev_view): bool extern;

procedure bit_rev(
    ghost iter_a: b16_iter,
    ghost iter_t: b16_iter)
returns (ghost iter_a': b16_iter)
{:frame false}    

    requires
        elems_iter_inv(heap, iter_a, a0, 0);

        symbols?["bit_rev_table_512"];
        b16_iter_inv(iter_t, heap,
            load_symbol(mem, "bit_rev_table_512"));
        iter_t.index == 0;

        bit_rev_ftable_wf(iter_t.buff);

        iter_a.base_ptr != iter_t.base_ptr;
{
    let init_a := iter_a.buff;
    
    ghost var view := bit_rev_view_init(initial_a);
    ghost var next_iter_t := iter_t;
    iter_a' := iter_a;

    lw_symbol(a1, "bit_rev_table_512");
    assume seq_len(iter_t.buff) == 480;
    // addi(a2, a1, 960);


}

#verbatim
}
#endverbatim