include "ot_mq_arith.i.vad"

#verbatim

include "ot_mq_arith.i.dfy"

module ot_bit_rev {

import opened ot_machine
import opened ot_abstraction
import opened ot_decls
import opened ot_vale
import opened mem

import opened integers
import opened bv256_op_s
import opened bv256_falcon_lemmas
import opened DivMod
import opened falcon_512_i

import opened pow2_s
import opened ntt_index

import opened ot_mq_arith

#endverbatim

type rev_view: Type(0) extern;
function operator(.ti) (m: rev_view): nat extern;
function operator(.b) (m: rev_view): seq(uint256) extern;

function elems_iter_inv(heap: heap_t, iter: iter_t, address: int, index: int): bool extern;
function heap_b32_ptr_valid(heap: heap_t, base_ptr: nat, count: nat): bool extern;

type pow2_t: Type(0) extern;
function init_unfinished(len: pow2_t): set(nat) extern;
function build_view(a: seq(uint256), i: nat, len: pow2_t): rev_view extern;
function is_bit_rev_shuffle(a: seq(uint256), b: seq(uint256), len: pow2_t): bool extern;
function bit_rev_view_init(a: seq(uint256)): rev_view extern;
function bit_rev_view_inv_peri_lemma(a: seq(uint256), next_b: seq(uint256), view: rev_view, table: seq(uint32)): rev_view extern;
function bit_rev_index_lemma(a: seq(uint256), ftable: seq(uint32), li: nat, ri: nat, ti: nat): void extern;
function bit_rev_view_inv_post_lemma(a: seq(uint256), view: rev_view): void  extern;
function bit_rev_ftable_wf(table: seq(uint32)): bool extern;
function bit_rev_shuffle_inv(a: seq(uint256), view: rev_view): bool extern;
const N: pow2_t extern;
function b32_seq(heap: heap_t, base_ptr: nat, count: nat): seq(uint32) extern;
function valid_elems(a: seq(uint256)): bool extern;

const Q: nat extern;
const N: pow2_t extern; 

function heap_b32_ptr_specialize_lemma(heap: heap_t, base_ptr: nat, count: nat, i: nat): void extern;
function heap_b256_write_preserves_b32_ptr_lemma(state: state, state': state, base_ptr: nat, count: nat, addr: int): void extern;


procedure bit_rev(
    ghost iter_a: iter_t,
    ghost p_base: uint32)
returns (ghost iter_a': iter_t)
    {:frame false}

    lets
        a_base        @= x5;
        p_ptr         @= x6;

    requires
        elems_iter_inv(heap, iter_a, a_base, 0);

        symbols?["bit_rev_table_512"];
        p_base == symbols["bit_rev_table_512"];

        heap_b32_ptr_valid(heap, p_base, 480);
        bit_rev_ftable_wf(b32_seq(heap, p_base, 480));

        iter_a.base_ptr != symbols["bit_rev_table_512"];

    ensures
        x2 == old(x2);
        x3 == old(x3);
        x4 == old(x4);
        x5 == old(x5);

    ensures
        w1 == old(w1);
        w5 == old(w5);
        w6 == old(w6);
        wmod == old(wmod);

    ensures
        elems_iter_inv(heap, iter_a', x5, 0);
        iter_a'.base_ptr == iter_a.base_ptr;

        heap_b32_ptr_valid(heap, p_base, 480);
        b32_seq(heap, p_base, 480) ==
            b32_seq(old(heap), p_base, 480);

    ensures
        symbols == old(symbols);
        heap == old(heap)
            [iter_a.base_ptr := heap[iter_a.base_ptr]];

    ensures
        is_bit_rev_shuffle(iter_a.buff, iter_a'.buff, N);
{
    let state0 := this;

    let init_a := iter_a.buff;
    let table := b32_seq(heap, p_base, 480);

    ghost var view := bit_rev_view_init(init_a);
    // ghost var iter_p' := iter_p;
    iter_a' := iter_a;

    la(p_ptr, "bit_rev_table_512");
    li(x7, 3);
    li(x8, 4);

    assume heap_w32_ptr_valid(heap, p_base + 1916);

    ghost var ti :nat := 0;


    while (LoopImm(240)) 
        invariant
            x2 == old(x2);
            x3 == old(x3);
            x4 == old(x4);

            x7 == 3;
            x8 == 4;
            p_ptr == p_base + 8 * ti;

        invariant
            w1 == old(w1);
            w5 == old(w5);
            w6 == old(w6);
            wmod == old(wmod);

        invariant
            elems_iter_inv(heap, iter_a', a_base, 0);
            iter_a'.base_ptr == iter_a.base_ptr;

            heap_b32_ptr_valid(heap, p_base, 480);
            b32_seq(heap, p_base, 480) == table;

        invariant
            symbols == old(symbols);
            heap == old(heap)[a_base := heap[a_base]];

        invariant
            ti + loop_ctr == 240;

        invariant
            view == build_view(init_a, ti, N);
            bit_rev_shuffle_inv(init_a, view);
            view.ti == ti;
            view.b == iter_a'.buff;

        decreases
            loop_ctr;
    {
        heap_b32_ptr_specialize_lemma(heap, p_base, 480, ti * 2);
        heap_b32_ptr_specialize_lemma(heap, p_base, 480, ti * 2 + 1);

        lw(x9, 0, p_ptr);
        let li := x9;
        lw(x10, 4, p_ptr);
        let ri := x10;

        bit_rev_index_lemma(init_a, table, li, ri, ti);

        left_shift_5(x9, x9);
        add(x9, x9, a_base);
        left_shift_5(x10, x10);
        add(x10, x10, a_base);

        iter_a' := bn_lid_safe(x7, false, 0, x9, false, iter_a'.(index := li));
        iter_a' := bn_lid_safe(x8, false, 0, x10, false, iter_a'.(index := ri));

        iter_a' := bn_sid_safe(x8, false, 0, x9, false, iter_a'.(index := li));

        iter_a' := bn_sid_safe(x7, false, 0, x10, false, iter_a'.(index := ri));

        heap_b256_write_preserves_b32_ptr_lemma(state0, this, p_base, 480, a_base);

        view := bit_rev_view_inv_peri_lemma(init_a, iter_a'.buff, view, table);

        addi(p_ptr, p_ptr, 8);

        iter_a' := iter_a'.(index := 0);
        ti := ti + 1;
    }

    bit_rev_view_inv_post_lemma(init_a, view);
    iter_a' := iter_a'.(index := 0);
}

#verbatim

}
#endverbatim
