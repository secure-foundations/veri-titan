include "mul256.i.vad"
include "addc512.i.vad"
include "cond_sub_to_reg.i.vad"

#verbatim
include "mul256.i.dfy"
include "addc512.i.dfy"
include "cond_sub_to_reg.i.dfy"

module mont_loop {

import opened ot_machine
import opened ot_abstraction
import opened ot_decls
import opened ot_vale
import opened mem

import opened mul256
import opened addc512
import opened cond_sub_to_reg

import opened Mul
import opened Power

import opened integers
import opened bv256_mm_lemmas
import opened bv256_op_s

#endverbatim

ghost procedure mont_word_mul_add_bound_lemma_0(
    ghost xs: seq(uint256),
    ghost ys: seq(uint256),
    ghost a: uint256,
    ghost b: uint256) extern;

ghost procedure mont_word_mul_add_bound_lemma_1(
    ghost xs: seq(uint256),
    ghost ys: seq(uint256),
    ghost a: uint256,
    ghost b: uint256,
    ghost c: uint256) extern;

function montmul_inv(
    a: seq(uint256),
    x: seq(uint256),
    i: int,
    y: seq(uint256),
    rsa: rsa_params) : bool extern;

ghost procedure mont_loop_inv_pre_lemma(
    ghost xi: uint256,
    ghost ui: uint256,
    ghost m0d: uint256,
    ghost p1: uint512_view_t,
    ghost p2: uint512_view_t,
    ghost y: seq(uint256),
    ghost m:seq(uint256),
    ghost a:seq(uint256)) extern;

function mont_loop_inv(
    xi: uint256,
    ui: uint256,
    p1: uint512_view_t,
    p2: uint512_view_t,
    y: seq(uint256),
    m: seq(uint256),
    prev_a: seq(uint256),
    next_a: seq(uint256),
    j: nat) : bool extern;

ghost procedure mont_loop_inv_peri_lemma(
    ghost xi: uint256,
    ghost ui: uint256,
    ghost p1: uint512_view_t,
    ghost p2: uint512_view_t,
    ghost next_p1: uint512_view_t,
    ghost next_p2: uint512_view_t,
    ghost y: seq(uint256),
    ghost m: seq(uint256),
    ghost prev_a: seq(uint256),
    ghost curr_a: seq(uint256),
    ghost next_a: seq(uint256),
    ghost j: int) extern;

ghost procedure mont_loop_inv_post_lemma(
    ghost xi: uint256,
    ghost ui: uint256,
    ghost p1: uint512_view_t,
    ghost p2: uint512_view_t,
    ghost y: seq(uint256),
    ghost m: seq(uint256),
    ghost prev_a: seq(uint256),
    ghost curr_a: seq(uint256),
    ghost bout: uint1) extern;

ghost procedure mont_loop_cond_sub_lemma(
    ghost xi: uint256,
    ghost ui: uint256,
    ghost y: seq(uint256),
    ghost m: nat,
    ghost prev_a: nat,
    ghost curr_a: seq(uint256),
    ghost next_a: seq(uint256),
    ghost bout: uint1,
    ghost next_bout: uint1) extern;

ghost procedure montmul_inv_lemma(
    ghost prev_a: seq(uint256),
    ghost curr_a: seq(uint256),
    ghost x: seq(uint256),
    ghost i: int,
    ghost ui: uint256,
    ghost y: seq(uint256),
    ghost rsa: rsa_params) extern;

function mont_loop_cong_lemma(
    p1: uint512_view_t,
    a0: uint256,
    y0: uint256,
    xi: uint256,
    w25: uint256,
    w26: uint256,
    m0d: nat): void extern;

function half_mul_256(a: int, b: int): uint256 extern;

procedure mont_loop_0(
    ghost curr_view: seq(uint256),
    ghost y_it: iter_t,
    ghost xi: uint256,
    ghost m0d: nat)

    returns (ghost next_y_it: iter_t,
        ghost p1: uint512_view_t)

    requires
        w2 == xi;
        w3 == m0d;
        w31 == 0;

        valid_wdr_view(wdrs, curr_view, 4, NUM_WORDS);

        iter_safe(y_it, heap, x19);
        seq_len(y_it.buff) == NUM_WORDS;
        y_it.index == 0;

    reads
        x16;
        w3; w31;
        flat; heap;

    modifies
        x8; x10; x12; x13; x19; x22;
        w2; w24; w25; w26; w27; w29; w30; wacc;
        fgroups; wdrs;

    ensures
        // x6 == old(x6);
        // x7 == old(x7);
        x8 == 5;
        // x9 == old(x9);
        x10 == 4;
        // x11 == old(x11);
        x12 == 30;
        x13 == 24;
        // x16 == old(x16);
        // x17 == old(x17);
        // x20 == old(x20);
        // x23 == old(x23);
        x22 == x16;
        // x24 == old(x24);
        // x30 == old(x30);

        w2 == xi;
        w3 == old(w3);
        w31 == 0;

        valid_wdr_view(wdrs, curr_view, 4, NUM_WORDS);

        valid_uint512_view(wdrs, p1, 30, 29);

        p1.full == curr_view[0] + y_it.buff[0] * xi;
        w25 == half_mul_256(p1.lh, m0d);

        next_y_it == b256_iter_load_next(y_it, true);
        iter_safe(next_y_it, heap, x19);
{
    comment("/* Save pointer to modulus. */");
    addi(x22, x16, 0);

    comment("/* Pointers to temporary registers. */");
    li(x12, 30);
    li(x13, 24);

    comment("/* Buffer read pointer. */");
    li(x8, 4);

    comment("/* Buffer write pointer. */");
    li(x10, 4);
    
    comment("/* Load 1st limb of input y (operand a): w30 = y[0] */");
    next_y_it := bn_lid_safe(x12, false, 0, x19, true, y_it);
    // assert wdrs[30] == y_it.buff[0];

    comment("/* [w26, w27] = w30*w2 = y[0]*xi */");
    mul256_w30xw2();
    // assert to_nat(seq(w27, w26)) == y_it.buff[0] * w2;

    comment("/* w24 = w4 = A[0] */");
    bn_movr(x13, false, x8, true);

    comment("/* add A[0]: [w29, w30] = [w26, w27] + w24 = y[0]*xi + A[0] */");
    p1 := mul_add_512(w30, w27, w24, w29, w26, w31, y_it.buff[0], w2);

    dw_view_lemma(p1);

    comment("/* w25 = w3 = m0d */");
    bn_mov(w25, w3);

    comment("/* [_, ui] = [w26, w27] = w30*w25 = (y[0]*xi + A[0])*m0d*/");
    mul256_w30xw25();

    comment("/* [_, ui] = [w28, w25] = [w26, w27]  */");
    bn_mov(w25, w27);

    mont_loop_cong_lemma(p1, curr_view[0], y_it.buff[0], xi, w25, w26, m0d);
}


procedure mont_loop_1(
    ghost ui: uint256,
    ghost xi: uint256,
    ghost p1: uint512_view_t,
    ghost p2: uint512_view_t,
    ghost y_it: iter_t,
    ghost m_it: iter_t,
    ghost prev_view: seq(uint256), 
    ghost curr_view: seq(uint256),
    ghost j: nat)

    returns (
        ghost next_p1: uint512_view_t,
        ghost next_p2: uint512_view_t,
        ghost next_y_it: iter_t,
        ghost next_m_it: iter_t,
        ghost next_view: seq(uint256))

    {:frame false}

    requires
        x8 == 4 + j;
        x10 == 3 + j;
        x12 == 30;
        x13 == 24;

        w2 == xi;
        w25 == ui;
        w31 == 0;

        valid_uint512_view(wdrs, p1, NA, 29);
        valid_uint512_view(wdrs, p2, NA, 28);

        y_it.index == j;
        y_it.index >= 1;
        y_it.index == m_it.index;

        iter_safe(y_it, heap, x19);
        seq_len(y_it.buff) == NUM_WORDS;
        iter_safe(m_it, heap, x16);
        seq_len(m_it.buff) == NUM_WORDS;

        valid_wdr_view(wdrs, curr_view, 4, NUM_WORDS);
        seq_len(prev_view) == NUM_WORDS;
        prev_view[j..] == curr_view[j..];

        mont_loop_inv(xi, ui, p1, p2,
            y_it.buff, m_it.buff, prev_view, curr_view, j);

    ensures
        x5 == old(x5);
        x6 == old(x6);
        x7 == old(x7);
        x8 == 4 + j + 1;
        x9 == old(x9);
        x10 == 3 + j + 1;
        x11 == old(x11);
        x12 == 30;
        x13 == 24;
        x17 == old(x17);
        x20 == old(x20);
        x21 == old(x21);
        x22 == old(x22);
        x23 == old(x23);
        x24 == old(x24);
        x30 == old(x30);

        w2 == xi;
        w3 == old(w3);
        w25 == ui;
        w31 == 0;

        flat == old(flat);
        heap == old(heap);

        valid_uint512_view(wdrs, next_p1, NA, 29);
        valid_uint512_view(wdrs, next_p2, NA, 28);

        next_y_it == b256_iter_load_next(y_it, true);
        iter_inv(next_y_it, heap, x19);

        next_m_it == b256_iter_load_next(m_it, true);
        iter_inv(next_m_it, heap, x16);

        valid_wdr_view(wdrs, next_view, 4, NUM_WORDS);
        prev_view[j+1..] == next_view[j+1..];

        mont_loop_inv(xi, ui, next_p1, next_p2,
            next_y_it.buff, next_m_it.buff, prev_view, next_view, j+1);
{
    ghost var j := y_it.index;
    comment("/* Load limb of y (operand a): w30 <= y[j] */");
    next_y_it := bn_lid_safe(x12, false, 0, x19, true, y_it);

    comment("/* Load limb of buffer: w24 <= A[j] */");
    bn_movr(x13, false, x8, true);

    comment("/* Multiply y[j]*xi, add A[j], and add carry from previous iteration:");
    comment("     [w26, w27] <= w30*w2 + w24 + w29 = y[j]*x_i + A[j] + c_xy */");
    next_p1 := mula512_w30xw2(y_it.buff[j], xi);

    comment("/* Step 2:  Second multiplication computes the product of a limb m[j] of");
    comment("   the modulus with u_i. The 2nd carry word from the previous loop cycle");
    comment("   c_m and the lower word a_tmp of the result of Step 1 are added. */");

    comment("/* Load limb m[j] of modulus: w30 <= m[j] */");
    next_m_it := bn_lid_safe(x12, false, 0, x16, true, m_it);

    comment("/* Multiply with ui and add result from first step:");
    comment("     [w28, w24] <= w30*w25 + w24 + w28 = m[j]*ui + a_tmp + c_m */");
    next_p2 := mula512_w30xw25(m_it.buff[j], ui);

    comment("/* store at w[4+j] = A[j-1]");
    comment("   This includes the reduction by 2^WLEN = 2^b in step 2.2 of HAC 14.36 */");
    bn_movr(x10, true, x13, false);
    next_view := curr_view[j-1 := w24];

    // assert valid_wdr_view(wdrs, next_view, 4, NUM_WORDS);
    // assert valid_uint512_view(wdrs, next_p1, NA, 29);
    // assert next_p1.full == p1.uh + y_it.buff[j] * xi + curr_view[j];
    // assert valid_uint512_view(wdrs, next_p2, NA, 28);
    // assert next_p2.full == m_it.buff[j] * ui + next_p1.lh + p2.uh;

    mont_loop_inv_peri_lemma(xi, ui, p1, p2, next_p1, next_p2,
        y_it.buff, m_it.buff, prev_view, curr_view, next_view, j);
}

function read_carry_flag_lemma(flags: flags_t): void extern;

procedure read_fg1()
    reads
        x0; fgroups;
    modifies
        x2;
    ensures
        x2 == bool_to_uint1(fgroups.fg1.cf);
{
    comment("/* Read carry flag 1 into a register: x2 <= FG1.C */");
    csrrs(x2, 0x7c1, x0);
    andi(x2, x2, 1);
    read_carry_flag_lemma(fgroups.fg1);
}

procedure mont_loop(
    ghost x_it: iter_t,
    ghost xi: uint256,
    ghost vars: mvars,
    ghost prev_view: seq(uint256))

    returns (ghost next_view: seq(uint256))

    {:noInline}
    {:frame false}

    requires

        w2 == xi;
        w3 == vars.rsa.M0D;
        w31 == 0;

        iter_inv(x_it, heap, x20);
        seq_len(x_it.buff) == NUM_WORDS;
        x_it.index >= 1;
        x_it.buff[x_it.index-1] == xi;

        valid_wdr_view(wdrs, prev_view, 4, NUM_WORDS);
        mvars_inv(vars, heap, NA, x19, x16, NA, NA, NA);
        montmul_inv(prev_view, x_it.buff, x_it.index-1, vars.y_it.buff, vars.rsa);

    ensures
        x5 == old(x5);
        x6 == old(x6);
        x7 == old(x7);
        x9 == old(x9);
        x11 == old(x11);
        x17 == old(x17);
        x20 == old(x20);
        x21 == old(x21);
        x23 == old(x23);
        x24 == old(x24);

        w3 == old(w3);
        w31 == old(w31);

        valid_wdr_view(wdrs, next_view, 4, NUM_WORDS);

        montmul_inv(next_view, x_it.buff, x_it.index, vars.y_it.buff, vars.rsa);

        flat == old(flat);
        heap == old(heap);
{
    comment("/**");
    comment("* Main loop body for variable-time 3072-bit Montgomery Modular Multiplication");
    comment("*");
    comment("* Returns: C <= (C + A*b_i + M*m0'*(C[0] + A[0]*b_i))/(2^WLEN) mod R");
    comment("*");
    comment("* This implements the main loop body for the Montgomery Modular Multiplication");
    comment("* as well as the conditional subtraction. See e.g. Handbook of Applied");
    comment("* Cryptography (HAC) 14.36 (steps 2.1 and 2.2) and step 3.");
    comment("* This subroutine has to be called for every iteration of the loop in step 2");
    comment("* of HAC 14.36, i.e. once per limb of operand B (x in HAC notation). The limb");
    comment("* is supplied via w2. In the comments below, the index i refers to the");
    comment("* i_th call to this subroutine within one full Montgomery Multiplication run.");
    comment("* Step 3 of HAC 14.36 is replaced by the approach to perform the conditional");
    comment("* subtraction when the intermediate result is larger than R instead of m. See");
    comment("* e.g. https://place-holder section 2.4.2 for a justification.");
    comment("* This does not omit the conditional subtraction.");
    comment("* Variable names of HAC are mapped as follows to the ones used in the");
    comment("* this library: x=B, y=A, A=C, b=2^WLEN, m=M, R=R, m' = m0', n=N.");
    comment("*");
    comment("* Flags: The states of both FG0 and FG1 depend on intermediate values and are");
    comment("*        not usable after return.");
    comment("*");
    comment("* @param[in]  x16: dmem pointer to first limb of modulus M");
    comment("* @param[in]  x19: dmem pointer to first limb operand A");
    comment("* @param[in]  w2:  current limb of operand B, b_i");
    comment("* @param[in]  w3:  Montgomery constant m0'");
    comment("* @param[in]  w31: all-zero");
    comment("* @param[in]  [w15:w4] intermediate result A");
    comment("* @param[out] [w15:w4] intermediate result A");
    comment("*");
    comment("*/");

    ghost var curr_view := prev_view;
    ghost var p1: uint512_view_t;
    ghost var p2 : uint512_view_t;
    ghost var y_it : iter_t;
    ghost var m_it : iter_t;

    y_it, p1 := mont_loop_0(curr_view, vars.y_it, xi, vars.rsa.M0D);
    ghost var ui := w25;

    comment("/* w24 <= w30 =  y[0]*xi + A[0] mod b */");
    bn_mov(w24, w30);

    comment("/* Load first limb of modulus: w30 <= m[0]. */");
    m_it := bn_lid_safe(x12, false, 0, x16, true, vars.m_it);

    comment("/* [w26, w27] = w30*w25 = m[0]*ui */");
    mul256_w30xw25();
    // assert to_nat(seq(w27, w26)) == m_it.buff[0] * ui;

    comment("/* [w28, w27] <= [w26, w27] + w24 = m[0]*ui + (y[0]*xi + A[0] mod b) */");
    p2 := mul_add_512(w27, w27, w24, w28, w26, w31, w30, w25);

    LemmaMulIsCommutativeAuto();
    mont_loop_inv_pre_lemma(xi, ui, vars.rsa.M0D, p1, p2, y_it.buff, m_it.buff, curr_view);

    ghost var j: nat := 1;

    comment("/* This loop implements step 2.2 of HAC 14.36 with a word-by-word approach.");
    comment("   The loop body is subdivided into two steps. Each step performs one");
    comment("   multiplication and subsequently adds two WLEN sized words to the");
    comment("   2WLEN-sized result, such that there are no overflows at the end of each");
    comment("   step-");
    comment("   Two carry words are required between the cycles. Those are c_xy and c_m.");
    comment("   Assume that the variable j runs from 1 to N-1 in the explanations below.");
    comment("   A cycle 0 is omitted, since the results from the computations above are");
    comment("   re-used */");
    while (LoopImm(11))
        invariant
            x5 == old(x5);
            x6 == old(x6);
            x7 == old(x7);
            x8 == 4 + j;
            x9 == old(x9);
            x10 == 3 + j;
            x11 == old(x11);
            x12 == 30;
            x13 == 24;
            x17 == old(x17);
            x20 == old(x20);
            x21 == old(x21);
            x23 == old(x23);
            x24 == old(x24);

            w2 == xi;
            w3 == old(w3);
            w25 == ui;
            w31 == 0;

            flat == old(flat);
            heap == old(heap);

            valid_uint512_view(wdrs, p1, NA, 29);
            valid_uint512_view(wdrs, p2, NA, 28);

            loop_ctr + j == NUM_WORDS;
            y_it.index == j;
            y_it.index >= 1;
            y_it.index == m_it.index;

            iter_inv(y_it, heap, x19);
            y_it.buff == vars.y_it.buff;

            iter_inv(m_it, heap, x16);
            m_it.buff == vars.m_it.buff;
            m_it.base_ptr == x22;

            valid_wdr_view(wdrs, curr_view, 4, NUM_WORDS);
            seq_len(prev_view) == NUM_WORDS;

            prev_view[j..] == curr_view[j..];

            mont_loop_inv(xi, ui, p1, p2,
                y_it.buff, m_it.buff, prev_view, curr_view, j);

        decreases loop_ctr;
    {
        p1, p2, y_it, m_it, curr_view := mont_loop_1(
            ui, xi, p1, p2, y_it, m_it, prev_view, curr_view, j);
        j := j + 1;
    }

    comment("/* Most significant limb of A is sum of the carry words of last loop cycle.");
    comment("   A[N-1] = w24 <- w29 + w28 = c_xy + c_m */");
    // bn.addc   w24, w29, w28, FG1
    bn_add(w24, w29, w28, SFT_DFT, 1);
    bn_movr(x10, true, x13, false);

    curr_view := curr_view[NUM_WORDS-1 := w24];

    ghost var bout := bool_to_uint1(fgroups.fg1.cf);

    mont_loop_inv_post_lemma(xi, ui, p1, p2,
        y_it.buff, m_it.buff, prev_view, curr_view, bout);

    comment("/* Clear flag group 0. */");
    bn_add(w31, w31, w31, SFT_DFT, 0);

    comment("/* The below replaces Step 3 of HAC 14.36 and performs conditional");
    comment("   subtraction of the modulus from the output buffer.  */");

    read_fg1();

    next_view := curr_view;

    comment("/* Subtract modulus if the carry was 1; otherwise skip. */");
    if (x2 != x0) {
        m_it := b256_iter_cons(x22, 0, heap[x22].b256);
        next_view := sub_to_reg(curr_view, m_it);
    }

    mont_loop_cond_sub_lemma(xi, ui, y_it.buff, to_nat(m_it.buff),
        to_nat(prev_view), curr_view, next_view, bout, bool_to_uint1(fgroups.fg0.cf));
    
    comment("/* Restore pointers. */");
    li(x8, 4);
    li(x10, 4);

    reveal Pow;
    montmul_inv_lemma(prev_view, next_view, x_it.buff, x_it.index-1, ui, y_it.buff, vars.rsa);
}

#verbatim
}
#endverbatim
