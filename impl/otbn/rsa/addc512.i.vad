include "mul256.i.vad"

#verbatim

include "mul256.i.dfy"

module addc512 {

import opened ot_machine
import opened ot_abstraction
import opened ot_decls
import opened ot_vale

import opened mul256

import opened integers
import opened bv256_mm_lemmas
import opened bv256_op_s

import opened Mul

#endverbatim

function dw_add_is_safe(x_lh: int, x_uh: int, y_lh: int, y_uh: int): bool extern;

function dw_add_lemma(x_lh: int, x_uh: int,
    y_lh: int, y_uh: int, c1: uint1): uint512_view_t extern;

ghost procedure LemmaMulIsCommutativeAuto() extern;

// procedure seq_addc_512_safe(
//     inout dst1: reg256, in src1a: reg256, in src1b: reg256,
//     inout dst2: reg256, in src2a: reg256, in src2b: reg256)
//     returns (ghost sum: uint512_view_t)

//     requires
//         dw_add_is_safe(src1a, src2a, src1b, src2b);
//         src2b == 0;

//         is_wide_data_register(@dst1);
//         is_wide_data_register(@dst2);

//         @dst1 != @dst2;
//         @dst1 != @src2a;
//         @dst1 != @src2b;

//     reads
//         wdrs;

//     modifies
//         fgroups;

//     ensures
//         sum.full == to_nat(seq(old(src1a), old(src2a))) + old(src1b);
//         valid_uint512_view(wdrs, sum, @dst1.index, @dst2.index);
// {
//     ghost var x_lh := src1a;
//     ghost var y_lh := src1b;
//     ghost var x_uh := src2a;
//     ghost var y_uh := src2b;

//     bn_add(dst1, src1a, src1b, SFT_DFT, 0);
//     ghost var c1 := bool_to_uint1(fgroups.fg0.cf);
//     bn_addc(dst2, src2a, src2b, SFT_DFT, 0);

//     sum := dw_add_lemma(x_lh, x_uh, y_lh, y_uh, c1);
// }

function mul_add_lemma(xs: seq(uint256), ys: seq(uint256), carry: uint1, a: uint256, b: uint256): uint512_view_t extern;

procedure mul_add_512(
    inout dst1: reg256, in src1a: reg256, in src1b: reg256,
    inout dst2: reg256, in src2a: reg256, in src2b: reg256,
    ghost a: uint256, ghost b: uint256)
    returns (ghost sum: uint512_view_t)

    requires
        to_nat(seq(old(src1a), old(src2a))) == a * b;
        
        src2b == 0;

        is_wide_data_register(@dst1);
        is_wide_data_register(@dst2);

        @dst1 != @dst2;
        @dst1 != @src2a;
        @dst1 != @src2b;

    reads
        wdrs;

    modifies
        fgroups;

    ensures
        sum.full == a * b + old(src1b);
        valid_uint512_view(wdrs, sum, @dst1.index, @dst2.index);
{
    ghost var x_lh := src1a;
    ghost var y_lh := src1b;
    ghost var x_uh := src2a;
    ghost var y_uh := src2b;

    bn_add(dst1, src1a, src1b, SFT_DFT, 0);
    ghost var c1 := bool_to_uint1(fgroups.fg0.cf);
    bn_addc(dst2, src2a, src2b, SFT_DFT, 0);

    sum := mul_add_lemma(seq(x_lh, x_uh), seq(y_lh, y_uh), c1, a, b);
}

function mul_double_add_lemma(xs: seq(uint256), ys: seq(uint256), carry: uint1, a: uint256, b: uint256, c: uint256): uint512_view_t extern;

procedure mul_double_add_512(
    inout dst1: reg256, in src1a: reg256, in src1b: reg256,
    inout dst2: reg256, in src2a: reg256, in src2b: reg256,
    ghost a: uint256, ghost b: uint256, ghost c: uint256)
    returns (ghost sum: uint512_view_t)

    requires
        to_nat(seq(old(src1a), old(src2a))) == a * b + c;
        
        src2b == 0;

        is_wide_data_register(@dst1);
        is_wide_data_register(@dst2);

        @dst1 != @dst2;
        @dst1 != @src2a;
        @dst1 != @src2b;

    reads
        wdrs;

    modifies
        fgroups;

    ensures
        sum.full == a * b + c + old(src1b);
        valid_uint512_view(wdrs, sum, @dst1.index, @dst2.index);
{
    ghost var x_lh := src1a;
    ghost var y_lh := src1b;
    ghost var x_uh := src2a;
    ghost var y_uh := src2b;

    bn_add(dst1, src1a, src1b, SFT_DFT, 0);
    ghost var c1 := bool_to_uint1(fgroups.fg0.cf);
    bn_addc(dst2, src2a, src2b, SFT_DFT, 0);

    sum := mul_double_add_lemma(seq(x_lh, x_uh), seq(y_lh, y_uh), c1, a, b, c);
}

ghost procedure dw_view_lemma(ghost num: uint512_view_t) extern;

procedure mula512_w30xw2(ghost a: uint256, ghost b: uint256)
    returns (ghost next_p: uint512_view_t)

    requires
        w30 == a;
        w2 == b;
        w31 == 0;
    reads
        w2; w30; w31; wdrs; 
    modifies
        w24; w26; w27; w29; wacc; fgroups;
    ensures
        valid_uint512_view(wdrs, next_p, 24, 29);
        next_p.full == a * b + old(w24) + old(w29);
{
    LemmaMulIsCommutativeAuto();

    mul256_w30xw2();
    // assert to_nat(seq(w27, w26)) == a * b;

    /* add limb of buffer: [w26, w27] <- [w26,w27] + w24 = y[j]*xi + A[j] */
    next_p := mul_add_512(w27, w27, w24, w26, w26, w31, a, b);
    dw_view_lemma(next_p);

    /* add carry word from previous cycle:
       [c_xy, a_tmp] = [w29, w24] <- [w26,w27] + w29 = y[j]*xi + A[j] + c_xy*/
    next_p := mul_double_add_512(w24, w27, w29, w29, w26, w31, a, b, old(w24));
}

procedure mula512_w30xw25(ghost a: uint256, ghost b: uint256)
    returns (ghost next_p: uint512_view_t)

    requires
        w30 == a;
        w25 == b;
        w31 == 0;
    reads
        w25; w30; w31; wdrs; 
    modifies
        w24; w26; w27; w28; wacc; fgroups;
    ensures
        valid_uint512_view(wdrs, next_p, 24, 28);
        next_p.full == a * b + old(w24) + old(w28);
{
    LemmaMulIsCommutativeAuto();

    mul256_w30xw25();
    assert to_nat(seq(w27, w26)) == a * b;

    /* add result from first step
       [w26, w27] <- [w26, w27] + w24 = m[j]*ui + a_tmp */
    next_p := mul_add_512(w27, w27, w24, w26, w26, w31, a, b);
    assert next_p.full == a * b + old(w24);

    /* [c_m, A[j-1]] = [w28, w24] = m[j]*ui + a_tmp + c_m */
    dw_view_lemma(next_p);

    next_p := mul_double_add_512(w24, w27, w28, w28, w26, w31, a, b, old(w24));
    // assert next_p.full == a * b + old(w24) + old(w28);
}

#verbatim
}
#endverbatim