include "mont_mul.i.vad"
include "ge_mod.i.vad"
include "sub_mod.i.vad"

#verbatim
include "ge_mod.i.dfy"
include "sub_mod.i.dfy"
include "mont_mul.i.dfy"

module mod_pow {

import opened integers
import opened rv_machine
import opened rv_decls
import opened rv_vale

import opened sub_mod
import opened ge_mod
import opened mont_mul
import opened mem
import opened stack

import opened bv32_mm_lemmas
import opened bv32_op_s

import opened Power
import opened DivMod

#endverbatim

type mp_vars: Type(0) extern; 

function operator(.mp_frame_ptr) (vars: mp_vars): nat extern;
function operator(.mm_frame_ptr) (vars: mp_vars): nat extern;
function operator(.mma_frame_ptr) (vars: mp_vars): nat extern;
function operator(.iter_rr) (vars: mp_vars): iter_t extern;
function operator(.iter_n) (vars: mp_vars): iter_t extern;
function operator(.iter_in) (vars: mp_vars): iter_t extern;
function operator(.iter_ar) (vars: mp_vars): iter_t extern; 
function operator(.iter_ar := ) (vars: mp_vars, it: iter_t): mp_vars extern; 
function operator(.iter_aar) (vars: mp_vars): iter_t extern; 
function operator(.iter_aar := ) (vars: mp_vars, it: iter_t): mp_vars extern; 
function operator(.iter_out) (vars: mp_vars): iter_t extern;
function operator(.iter_out := ) (vars: mp_vars, it: iter_t): mp_vars extern; 

function modexp_var_inv(a: nat, i: nat, rsa: rsa_params): bool extern;

function modexp_var_inv_pre_lemma(
    a_view: seq(uint32),
    rr: seq(uint32),
    sig: seq(uint32),
    rsa: rsa_params): void extern;

function modexp_var_inv_peri_lemma(
    ar: seq(uint32),
    aar: seq(uint32),
    i: nat,
    rsa: rsa_params): void extern;

function modexp_var_inv_post_lemma(
    a_view: seq(uint32),
    next_a_view: seq(uint32),
    sig: seq(uint32),
    rsa: rsa_params): void extern;

function mod(a: int, m: int): int extern;

function mm_vars_cons(
    iter_a: iter_t,
    iter_b: iter_t,
    iter_c: iter_t, 
    iter_n: iter_t): mm_vars extern;

function mp_vars_inv(
    vars: mp_vars,
    heap: heap_t,
    rr_ptr: int,
    n_ptr: nat,
    in_ptr: nat,
    ar_ptr: nat,
    aar_ptr: nat,
    out_ptr: nat,
    rsa: rsa_params): bool extern;

function modexp_var_correct_lemma(
    raw_val: nat,
    adjusted_val: nat,
    carry: bool,
    rsa: rsa_params): void extern;

procedure mp_save_regs()
    requires
        sp == STACK_START();
    modifies
        sp; mem; flat;
    reads
        ra; s0; s1; s2; s3; s4; s5; s6;
    ensures
        sp == STACK_START() - 32;
        mem == stack_push_batch(old(mem), old(flat),
            seq(s6, s5, s4, s3, s2, s1, s0, ra));
        stack_depth(mem) == stack_depth(old(mem)) + 1;
{
    push_frame((-32));
    sw_stack(ra, 28);
    sw_stack(s0, 24);
    sw_stack(s1, 20);
    sw_stack(s2, 16);
    sw_stack(s3, 12);
    sw_stack(s4,  8);
    sw_stack(s5,  4);
    sw_stack(s6,  0);

    let target := stack_push_batch(old(mem), old(flat),
        seq(s6, s5, s4, s3, s2, s1, s0, ra));
    assert top_frame(target.frames) == top_frame(mem.frames);
}

procedure mp_pre(ghost vars: mp_vars, ghost rsa: rsa_params)
    returns (ghost mut_vars: mp_vars)

    requires
        sp == STACK_START() - 32;
        a0 == rsa.M0D;

        mp_vars_inv(vars, heap, a3 /* rr */, a4 /* n */, a5 /* in */,
            a2 /* ar */, a2 + NUM_WORDS * 4 /*aar */, a1 /* out_ptr */, rsa);

    reads x0;

    modifies
        sp; s0; s1; s2; s3; s4; s5; s6; s7; s8;
        a0; a1; a2; a3; a4; a5; a6; ra;
        heap; mem; flat;

    ensures
        s1 == 8;
        s3 == rsa.M0D;
        s7 == old(s7);
        s8 == old(s8);

        mp_vars_inv(mut_vars, heap, NA /* rr */, s6 /* n */, s5 /* in */,
            s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);

        mut_vars == vars.(iter_ar := mut_vars.iter_ar);
        mut_vars.iter_ar.base_ptr == vars.iter_ar.base_ptr;

    ensures
        mem.frames == old(mem).frames;
        heap == old(heap)
            [vars.iter_ar.base_ptr := B32(mut_vars.iter_ar.buff)];

    ensures
        modexp_var_inv(to_nat(mut_vars.iter_ar.buff), 0, rsa);
{
    mv(s0, a2); // s0 = ar
    mv(s6, a4); // s6 = n
    mv(s3 ,a0); // s3 = d0inv
    mv(s5, a5); // s5 = in
    mv(s4, a1); // s4 = out

    addi(s2, a2, 384);

    let mmvars := mm_vars_cons(
        vars.iter_rr,
        vars.iter_in,
        vars.iter_ar,
        vars.iter_n);

    mv(a2, a3);
    mv(a1, s0);
    mv(a3, s5);

    // assert mvar_iter_inv(heap, vars.iter_ar, a1, 0, NA);
    // assert mvar_iter_inv(heap, vars.iter_rr, a2, 0, rsa.RR);
    // assert mvar_iter_inv(heap, vars.iter_n, a4, 0, rsa.M);
    // assert mvar_iter_inv(heap, vars.iter_in, a3, 0, rsa.SIG);

    let iter_temp := mont_mul(mmvars, rsa);
    mut_vars := vars.(iter_ar := iter_temp);

    assert iter_temp.base_ptr == vars.iter_ar.base_ptr;

    li(s1, 8);

    assert montmul_inv(mut_vars.iter_ar.buff,
        mut_vars.iter_rr.buff, NUM_WORDS, mut_vars.iter_in.buff, rsa);

    modexp_var_inv_pre_lemma(
        mut_vars.iter_ar.buff,
        mut_vars.iter_rr.buff,
        mut_vars.iter_in.buff,
        rsa);
}

procedure mp_loop(ghost vars: mp_vars, ghost rsa: rsa_params, ghost i: nat)
    returns (ghost mut_vars: mp_vars)

    requires
        sp == STACK_START() - 32;

    requires
        s3 == rsa.M0D;

        mp_vars_inv(vars, heap, NA /* rr */, s6 /* n */, s5 /* in */,
            s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);

    requires
        modexp_var_inv(to_nat(vars.iter_ar.buff), 2 * i, rsa);

    reads x0;

    modifies
        sp; s0; s1; s2; s3; s4; s5; s6; s7; s8;
        a0; a1; a2; a3; a4; a5; a6; ra;
        heap; mem; flat;

    ensures
        ra == old(ra);
        s0 == old(s0);
        s1 == old(s1);
        s2 == old(s2);
        s3 == old(s3);
        s4 == old(s4);
        s5 == old(s5);
        s6 == old(s6);
        s7 == old(s7);
        s8 == old(s8);
        sp == old(sp);

    ensures
        mp_vars_inv(mut_vars, heap, NA /* rr */, s6 /* n */, s5 /* in */,
            s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);

        mut_vars == vars.(iter_ar := mut_vars.iter_ar)
            .(iter_aar := mut_vars.iter_aar);

        mut_vars.iter_ar.base_ptr == vars.iter_ar.base_ptr;
        mut_vars.iter_aar.base_ptr == vars.iter_aar.base_ptr;

        heap == old(heap)[vars.iter_ar.base_ptr := B32(mut_vars.iter_ar.buff)]
            [vars.iter_aar.base_ptr := B32(mut_vars.iter_aar.buff)];
        mem.frames == old(mem).frames;
    ensures
        modexp_var_inv(to_nat(mut_vars.iter_ar.buff), 2 * (i+1), rsa);
{
    let old_ar := vars.iter_ar.buff;

    ghost var mmvars := mm_vars_cons(
        vars.iter_ar,
        vars.iter_ar,
        vars.iter_aar,
        vars.iter_n);

    mv(a3, s0); // ar
    mv(a2, s0); // ar
    mv(a1, s2); // aar
    mv(a0, s3); // M0D
    mv(a4, s6); // n

    ghost var iter_temp: iter_t;
    iter_temp := mont_mul(mmvars, rsa);
    mut_vars := vars.(iter_aar := iter_temp);

    modexp_var_inv_peri_lemma(vars.iter_ar.buff, iter_temp.buff, 2 * i, rsa);

    assert modexp_var_inv(to_nat(iter_temp.buff), 2 * i + 1, rsa);

    mmvars := mm_vars_cons(
        mut_vars.iter_aar,
        mut_vars.iter_aar,
        mut_vars.iter_ar,
        mut_vars.iter_n);

    mv(a3, s2);
    mv(a2, s2);
    mv(a1, s0);
    mv(a0, s3);
    mv(a4, s6);

    iter_temp := mont_mul(mmvars, rsa);
    mut_vars := mut_vars.(iter_ar := iter_temp);

    modexp_var_inv_peri_lemma(mut_vars.iter_aar.buff, iter_temp.buff, 2 * i + 1, rsa);
}

procedure mp_post(ghost vars: mp_vars, ghost rsa: rsa_params)
    returns (ghost mut_vars: mp_vars)

    requires
        sp == STACK_START() - 32;

        rsa.E0 == 16;

        s3 == rsa.M0D;

        mp_vars_inv(vars, heap, NA /* rr */, s6 /* n */, s5 /* in */,
            s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);
    
    requires
        modexp_var_inv(to_nat(vars.iter_ar.buff), rsa.E0, rsa);

    reads x0;

    modifies
        sp; s0; s1; s2; s3; s4; s5; s6; s7; s8;
        a0; a1; a2; a3; a4; a5; a6; ra; heap; mem; flat;

    ensures
        mut_vars.iter_out.base_ptr == vars.iter_out.base_ptr;
        mut_vars == vars.(iter_out := mut_vars.iter_out);
        mp_vars_inv(mut_vars, heap, NA /* rr */, s6 /* n */, s5 /* in */,
            s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);
        to_nat(mut_vars.iter_out.buff) == mod(Pow(rsa.SIG, rsa.E), rsa.M);

        heap == old(heap)[mut_vars.iter_out.base_ptr := B32(mut_vars.iter_out.buff)];
        mem.frames == old(mem).frames;

    ensures
        ra == old(ra);
        s0 == old(s0);
        s1 == old(s1);
        s2 == old(s2);
        s3 == old(s3);
        s4 == old(s4);
        s5 == old(s5);
        s6 == old(s6);
        s7 == old(s7);
        s8 == old(s8);
        sp == old(sp);
{
    mv(a0, s3);
    mv(a3, s5);
    mv(a2, s0);
    mv(a1, s4);
    mv(a4, s6); // n

    mut_vars := vars;

    let mmvars := mm_vars_cons(
        mut_vars.iter_ar,
        mut_vars.iter_in,
        mut_vars.iter_out,
        mut_vars.iter_n);

    ghost var iter_out: iter_t;
    iter_out := mont_mul(mmvars, rsa);
    mut_vars := mut_vars.(iter_out := iter_out);

    modexp_var_inv_post_lemma(
        mut_vars.iter_ar.buff,
        iter_out.buff,
        mut_vars.iter_in.buff,
        rsa);

    mv(a0, s4);
    mv(a1, s6);
    let sub := ge_mod(mut_vars.iter_n, iter_out);

    ghost var raw_val := to_nat(iter_out.buff);

    if (a0 == x0) {
        mv(a0, s4);
        mv(a1, s6);
        ghost var borrow: nat;
        iter_out, borrow := sub_mod(mut_vars.iter_n, iter_out);
        // assert mp_vars_inv(mut_vars, heap, 71576 /* rr */, 71192 /* n */, s5 /* in */,
        //    s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);
        assert borrow == 0;
    }

    mut_vars := mut_vars.(iter_out := iter_out);
    modexp_var_correct_lemma(raw_val, to_nat(iter_out.buff), !sub, rsa);
}

procedure mod_pow(
    ghost vars: mp_vars, ghost rsa: rsa_params)
    returns (ghost mut_vars:  mp_vars)

    {:noInline}

    requires
        sp == STACK_START();    
        rsa.E0 == 16;
        a0 == rsa.M0D;
        mp_vars_inv(vars, heap, a3 /* rr */, a4 /* n */, a5 /* in */,
            a2 /* ar */, a2 + NUM_WORDS * 4 /*aar */, a1 /* out_ptr */, rsa);

    reads x0;

    modifies
        sp; s0; s1; s2; s3; s4; s5; s6; s7; s8;
        a0; a1; a2; a3; a4; a5; a6; ra; heap; mem; flat;

    ensures
        ra == old(ra);
        s0 == old(s0);
        s1 == old(s1);
        s2 == old(s2);
        s3 == old(s3);
        s4 == old(s4);
        s5 == old(s5);
        s6 == old(s6);
        s7 == old(s7);
        s8 == old(s8);
        sp == old(sp);

    ensures
        mp_vars_inv(mut_vars, heap, NA /* rr */, old(a4) /* n */, old(a5) /* in */,
            old(a2) /* ar */, old(a2) + NUM_WORDS * 4 /*aar */, old(a1) /* out_ptr */, rsa);

    ensures
        heap == old(heap)[mut_vars.iter_out.base_ptr := B32(mut_vars.iter_out.buff)]
            [mut_vars.iter_ar.base_ptr := B32(mut_vars.iter_ar.buff)]
            [mut_vars.iter_aar.base_ptr := B32(mut_vars.iter_aar.buff)];

    ensures
        mut_vars.iter_out.base_ptr == vars.iter_out.base_ptr;
        to_nat(mut_vars.iter_out.buff) == mod(Pow(rsa.SIG, rsa.E), rsa.M);
{
    mp_save_regs();
    let mem0 := mem;

    mut_vars := mp_pre(vars, rsa);
    let mem1 := mem;

    assert mem0.frames == mem1.frames;

    ghost var i :nat := 0;

    while (s1 > x0)
        invariant

            s3 == rsa.M0D;
            s1 == 8 - i;

            s7 == old(s7);
            s8 == old(s8);

            mp_vars_inv(mut_vars, heap, NA /* rr */, s6 /* n */, s5 /* in */,
                s0 /* ar */, s2 /*aar */, s4 /* out_ptr */, rsa);

            mut_vars == vars.(iter_ar := mut_vars.iter_ar)
                .(iter_aar := mut_vars.iter_aar);

            mut_vars.iter_ar.base_ptr == vars.iter_ar.base_ptr;
            mut_vars.iter_aar.base_ptr == vars.iter_aar.base_ptr;

            mem.heap == mem1.heap
                [vars.iter_ar.base_ptr := B32(mut_vars.iter_ar.buff)]
                [vars.iter_aar.base_ptr := B32(mut_vars.iter_aar.buff)];

            mem.frames == mem1.frames;

            modexp_var_inv(to_nat(mut_vars.iter_ar.buff), 2 * i, rsa);

        decreases
            s1;
    {
        mut_vars := mp_loop(mut_vars, rsa, i);
        addi(s1, s1, (-1));
        i := i + 1;
    }

    mut_vars := mp_post(mut_vars, rsa);

    lw_stack(ra, 28);
    lw_stack(s0, 24);
    lw_stack(s1, 20);
    lw_stack(s2, 16);
    lw_stack(s3, 12);
    lw_stack(s4,  8);
    lw_stack(s5,  4);
    lw_stack(s6,  0);
    pop_frame(32);
}
#verbatim
}
#endverbatim
