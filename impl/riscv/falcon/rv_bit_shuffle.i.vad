include "../../../spec/arch/riscv/decls.i.vad"
// include "rv_reg_save.i.vad"

#verbatim

include "../../../spec/arch/riscv/decls.i.dfy"
include "../../../../glue/riscv/falcon/bv32_falcon_lemmas.i.dfy"

module rv_bit_shuffle {

import opened integers

import opened rv_machine
import opened rv_decls
import opened rv_vale
import opened mem
import opened stack

import opened bv32_op_s
import opened pow2_s

import opened ntt_index

import opened falcon_512_i
import opened bv32_falcon_lemmas
// import opened rv_reg_save

#endverbatim

function elems_iter_inv(heap: heap_t, iter: b16_iter, address: int, index: int): bool extern;

function block_size(c: pow2_t): pow2_t extern;

function pow2_t_cons(n: nat, exp: nat): pow2_t extern;

type rev_view: Type(0) extern;
function operator(.ti) (m: rev_view): nat extern;
function operator(.b) (m: rev_view): seq(uint16) extern;

function b16_iter_inv(iter: b16_iter, heap: heap_t, address: int): bool extern;

function init_unfinished(len: pow2_t): set(nat) extern;
function build_view(a: seq(uint16), i: nat, len: pow2_t): rev_view extern;
function is_bit_rev_shuffle(a: seq(uint16), b: seq(uint16), len: pow2_t): bool extern;
function bit_rev_view_init(a: seq(uint16)): rev_view extern;
function bit_rev_view_inv_peri_lemma(a: seq(uint16), next_b: seq(uint16), view: rev_view, table: seq(uint16)): rev_view extern;
function bit_rev_index_lemma(a: seq(uint16),ftable: seq(uint16), sbi: uint32,rsbi: uint32, ti: nat, a0: uint32, t0: uint32, t1: uint32): void extern;
function bit_rev_view_inv_post_lemma(a: seq(uint16), view: rev_view): void  extern;
function bit_rev_ftable_wf(table: seq(uint16)): bool extern;
function bit_rev_shuffle_inv(a: seq(uint16), view: rev_view): bool extern;

procedure bit_rev(
    ghost iter_a: b16_iter,
    ghost iter_t: b16_iter)

returns (ghost next_iter_a: b16_iter)

    requires
        set_len(init_unfinished(N)) == 480;

    requires
        elems_iter_inv(heap, iter_a, a0, 0);

        symbols?["bit_rev_table_512"];
        b16_iter_inv(iter_t, heap,
            load_symbol(mem, "bit_rev_table_512"));
        iter_t.index == 0;

        bit_rev_ftable_wf(iter_t.buff);

        iter_a.base_ptr != iter_t.base_ptr;

    reads
        a0;

    modifies
        t0; t1; a1; a2; a3; a4;
        heap; mem;

    ensures
        a0 == old(a0);

    ensures
        next_iter_a.base_ptr == iter_a.base_ptr;
        elems_iter_inv(heap, next_iter_a, a0, 0);

        mem == old(mem).(heap := heap);
        heap == old(heap)
            [iter_a.base_ptr := heap[iter_a.base_ptr]];

        is_bit_rev_shuffle(iter_a.buff, next_iter_a.buff, N);
    {
        let initial_a := iter_a.buff;
        
        ghost var view := bit_rev_view_init(initial_a);
        ghost var next_iter_t := iter_t;
        next_iter_a := iter_a;

        lw_symbol(a1, "bit_rev_table_512");
        assert seq_len(iter_t.buff) == 480;
        addi(a2, a1, 960);

        ghost var ti :nat := 0;

        while (a1 < a2)
            invariant
                a0 == iter_a.base_ptr;
                a1 == next_iter_t.base_ptr + 4 * ti;
                a2 == iter_t.base_ptr + 960;

            invariant
                next_iter_t.base_ptr == iter_t.base_ptr;
                next_iter_t.index == 2 * ti;
                b16_iter_inv(next_iter_t, heap, a1);
                seq_len(iter_t.buff) == 480;

                next_iter_a.base_ptr == iter_a.base_ptr;
                elems_iter_inv(heap, next_iter_a, a0, 0);

            invariant
                mem == old(mem).(heap := heap);
                heap == old(heap)
                    [next_iter_a.base_ptr := heap[iter_a.base_ptr]];

            invariant
                view == build_view(initial_a, ti, N);
                bit_rev_shuffle_inv(initial_a, view);
                view.ti == ti;
                view.b == next_iter_a.buff;

            decreases
                a2 - a1;
        {
            next_iter_t := lhu_next(t0, a1, 0, true, next_iter_t);
            next_iter_t := lhu_next(t1, a1, 2, true, next_iter_t);

            let sbi := t0;
            let rsbi := t1;

            // assert sbi == iter_t.buff[2 * ti];
            // assert rsbi == iter_t.buff[2 * ti+1];

            slli(t0, t0, 1);
            add(t0, a0, t0);

            slli(t1, t1, 1);
            add(t1, a0, t1);

            bit_rev_index_lemma(initial_a, iter_t.buff, sbi, rsbi, ti, a0, t0, t1);

            lhu(a3, t0, 0, next_iter_a.(index := sbi));
            lhu(a4, t1, 0, next_iter_a.(index := rsbi));

            next_iter_a := sh_bounded_next(a4, t0, 0, false, next_iter_a.(index := sbi));
            next_iter_a := sh_bounded_next(a3, t1, 0, false, next_iter_a.(index := rsbi));

            next_iter_a := next_iter_a.(index := 0);

            view := bit_rev_view_inv_peri_lemma(initial_a, next_iter_a.buff, view, next_iter_t.buff);

            addi(a1, a1, 4);
            ti := ti + 1;
        }

        bit_rev_view_inv_post_lemma(initial_a, view);
    }


#verbatim
}
#endverbatim