include "rv_poly_mul.i.vad"
include "rv_normalize.i.vad"
include "mq_polysub.i.vad"

#verbatim

include "rv_poly_mul.i.dfy"
include "rv_normalize.i.dfy"
include "mq_polysub.i.dfy"

module rv_falcon {

import opened integers
import opened rv_machine
import opened rv_decls
import opened rv_vale
import opened mem
import opened stack

import opened bv32_op_s
import opened bv32_falcon_lemmas

import opened pow2_s
import opened ntt_index

import opened rv_normlization
import opened rv_poly_mul
import opened mq_polysub

import opened falcon_512_i

#endverbatim

function falcon_lemma(tt0: seq(uint16), tt1: seq(uint16), tt2: seq(uint16), s1: seq(uint16), s2: seq(uint16), h: seq(uint16), c0: seq(uint16), a0: uint32): void extern;

type nelem: Type(0) extern;
function falcon_verify(c0: seq(uint16), s2: seq(nelem), h: seq(uint16)): bool extern;
function as_nelems(a: seq(uint16)): seq(nelem) extern;

procedure rv_falcon(
    ghost iter_c0: b16_iter,
    ghost iter_s2: b16_iter,
    ghost iter_h: b16_iter,
    ghost iter_tt: b16_iter,
    ghost iter_t1: b16_iter,
    ghost iter_t2: b16_iter,
    ghost iter_p1: b16_iter,
    ghost iter_p2: b16_iter)

returns (ghost iter_tt': b16_iter)
{:noInline}
{:frame false}

    requires
        set_len(init_unfinished(N)) == 480;

    requires
        in_stack_addr_range(sp);
        in_stack_addr_range(sp - 24);

    requires
        elems_iter_inv(heap, iter_c0, a0, 0);
        nelems_iter_inv(heap, iter_s2, a1, 0);

        // writable
        elems_iter_inv(heap, iter_h, a2, 0);
        // writable
        elems_iter_inv(heap, iter_tt, a3, 0);

    requires
        symbols?["bit_rev_table_512"];
        b16_iter_inv(iter_t1, heap,
            load_symbol(mem, "bit_rev_table_512"));
        iter_t1.index == 0;

        bit_rev_ftable_wf(iter_t1.buff);

    requires
        symbols?["scaling_factors"];
        elems_iter_inv(heap, iter_t2,
            load_symbol(mem, "scaling_factors"), 0);
        iter_t2.buff == inverse_ntt_scaling_table();

    requires
        symbols?["rev_omega_inv_powers_mont_table"];
        elems_iter_inv(heap, iter_p1,
            load_symbol(mem, "rev_omega_inv_powers_mont_table"), 0);
        iter_p1.buff == rev_omega_inv_powers_mont_table();

    requires
        symbols?["rev_ntt512_mixed_powers_table"];
        elems_iter_inv(heap, iter_p2,
            load_symbol(mem, "rev_ntt512_mixed_powers_table"), 0);
        iter_p2.buff == rev_mixed_powers_mont_table();

    requires
        iter_h.base_ptr != iter_c0.base_ptr;
        iter_h.base_ptr != iter_s2.base_ptr;
        iter_h.base_ptr != iter_tt.base_ptr;
        iter_h.base_ptr != iter_t1.base_ptr;
        iter_h.base_ptr != iter_t2.base_ptr;
        iter_h.base_ptr != iter_p1.base_ptr;
        iter_h.base_ptr != iter_p2.base_ptr;

        iter_tt.base_ptr != iter_c0.base_ptr;
        iter_tt.base_ptr != iter_s2.base_ptr;
        iter_tt.base_ptr != iter_t1.base_ptr;
        iter_tt.base_ptr != iter_t2.base_ptr;
        iter_tt.base_ptr != iter_p1.base_ptr;
        iter_tt.base_ptr != iter_p2.base_ptr;

    ensures
        (a0 == 1)
            <==>
        falcon_verify(
            as_elems(iter_c0.buff), 
            as_nelems(iter_s2.buff),
            as_elems(iter_h.buff));
{
    li(s1, 12289);

    mv(s2, a0);
    mv(s3, a3);
    mv(s4, a1);

    iter_tt' := denormalize(iter_s2, iter_tt);
    let tt0 := iter_tt'.buff;

    ghost var iter_h' := iter_h;

    mv(a0, a3);
    mv(a1, a2);
    iter_tt', iter_h' := ntt_poly_mul(
        iter_tt', iter_h, iter_t1, iter_t2, iter_p1, iter_p2);
    let tt1 := iter_tt'.buff;

    li(a0, 12289);
    mv(s1, s3);
    mv(s0, s2);

    iter_tt', iter_h' := poly_sub(iter_tt', iter_c0);
    let tt2 := iter_tt'.buff;

    iter_tt' := normalize(iter_tt');

    is_short(iter_tt', iter_s2);

    assert (a0 == 1)
            <==>
        l2norm_squared(iter_tt'.buff, iter_s2.buff, 512) < 0x29845d6;

    falcon_lemma(tt0, tt1, tt2,
        iter_tt'.buff, iter_s2.buff, iter_h.buff, iter_c0.buff, a0);
}

#verbatim
}
#endverbatim