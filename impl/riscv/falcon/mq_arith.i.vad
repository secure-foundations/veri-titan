include "../../../spec/arch/riscv/decls.i.vad"

#verbatim
include "../../../spec/arch/riscv/decls.i.dfy"
include "../../../../glue/riscv/falcon/mq_arith_lemmas.dfy"
include "../../../../glue/riscv/falcon/bv32_falcon_lemmas.i.dfy"

module mq_arith {

import opened integers
import opened rv_machine
import opened rv_decls
import opened rv_vale

import opened bv32_op_s
import opened pow2_s
import opened mq_arith_lemmas
import opened bv32_falcon_lemmas
import opened falcon_512_i

#endverbatim

function rs1_lemma(x: uint32): void extern;
function ls1_lemma(a: uint32): void extern;
function pow2_increases_lemma(n: pow2_t, n': pow2_t): void extern;

procedure p2_half(inout dst: reg32, ghost p: pow2_t)
    returns (ghost p': pow2_t)
    requires
        dst == p.full;
        p.full >= 2;
    ensures
        dst == old(dst) / 2;
        dst == p'.full;
        p' == pow2_half(p);
{
    srli(dst, dst, 1);
    p' := pow2_half(p);
    rs1_lemma(old(dst));
}

procedure half(inout dst: reg32)
    ensures dst == old(dst) / 2;
{
    srli(dst, dst, 1);
    rs1_lemma(old(dst));
}

procedure p2_double(inout dst: reg32, ghost p: pow2_t)
    returns (ghost p': pow2_t)
    requires
        dst == p.full;
        p.exp <= 9;
    ensures
        dst == old(dst) * 2;
        dst == p'.full;
        p' == pow2_double(p);
{
    slli(dst, dst, 1);
    pow2_increases_lemma(p, N);
    p' := pow2_double(p);
    ls1_lemma(old(dst));
}

function montmul(a: nat, b: nat): uint32 extern;
function mqmul(a: nat, b: nat): uint32 extern;
function mqsub(a: nat, b: nat): uint32 extern;
function mqadd(a: nat, b: nat): uint32 extern;

function cond_set_Q_lemma(a: uint32, b: uint32): void extern;
function cond_Q(a: uint32): uint32 extern;

procedure cond_set_Q(inout dst: reg32, in src: reg32, in qsrc: reg32)
    requires
        @dst != @qsrc;
        @src != @qsrc;
        qsrc == 12289;

    ensures
        dst == cond_Q(old(src));
{
    srai(dst, src, 31);
    and(dst, dst, qsrc);
    cond_set_Q_lemma(old(src), dst);
}

procedure ntt_inline_mq_add()
    requires
        a0 == 12289;
        t1 == 0xffffcfff;

        a1 < 12289;
        a2 < 12289;
    reads
        a0; a1; a2; t1;
    modifies
        a3; a4;
    ensures
      a3 == mqadd(old(a2), old(a1));
{
    add(a4, a2, t1);
    add(a4, a1, a4);
    cond_set_Q(a3, a4, a0);
    add(a3, a3, a4);
}

procedure ntt_inline_mq_sub()
    requires
        a0 == 12289;
        a1 < 12289;
        a2 < 12289;
    reads
        a0; a1; a2;
    modifies
        a3; a4;
    ensures
        a3 == mqsub(old(a2), old(a1));
{
    sub(a3, a2, a1);
    cond_set_Q(a4, a3, a0);
    add(a3, a4, a3);
}

#verbatim
}
#endverbatim
