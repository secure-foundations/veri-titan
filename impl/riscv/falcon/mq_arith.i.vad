include "../../../spec/arch/riscv/decls.i.vad"

#verbatim
include "../../../spec/arch/riscv/decls.i.dfy"
include "../../../../glue/riscv/falcon/mq_arith_lemmas.dfy"
include "../../../../glue/riscv/falcon/bv32_falcon_lemmas.i.dfy"

module mq_arith {

import opened integers
import opened rv_machine
import opened rv_decls
import opened rv_vale

import opened bv32_op_s
import opened pow2_s
import opened mq_arith_lemmas
import opened bv32_falcon_lemmas

#endverbatim

function rs1_is_half(a: uint32): void extern;

procedure p2_half(inout dst: reg32, ghost p: pow2_t)
    returns (ghost p': pow2_t)
    requires
        dst == p.full;
        p.full >= 2;
    ensures
        dst == old(dst) / 2;
        dst == p'.full;
        p' == pow2_half(p);
{
    srli(dst, dst, 1);
    p' := pow2_half(p);
    rs1_is_half(old(dst));
}

procedure half(inout dst: reg32)
    ensures dst == old(dst) / 2;
{
    srli(dst, dst, 1);
    rs1_is_half(old(dst));
}

function ls1_is_double(a: uint32): void extern;

procedure p2_double(inout dst: reg32, ghost p: pow2_t)
    returns (ghost p': pow2_t)
    requires
        dst == p.full;
        p.exp <= 9;
    ensures
        dst == old(dst) * 2;
        dst == p'.full;
        p' == pow2_double(p);
{
    slli(dst, dst, 1);
    assume p.full <= 512;
    p' := pow2_double(p);
    ls1_is_double(old(dst));
}

function montmul(a: nat, b: nat): uint32 extern;
function mqmul(a: nat, b: nat): uint32 extern;
function mqsub(a: nat, b: nat): uint32 extern;
function mqadd(a: nat, b: nat): uint32 extern;

function cond_set_Q_lemma(a: uint32, b: uint32): void extern;
function cond_Q(a: uint32): uint32 extern;

procedure cond_set_Q(inout src: reg32, inout dst: reg32, in qsrc: reg32)
    requires
        @dst != @qsrc;
        @src != @qsrc;
        qsrc == 12289;

    ensures
        dst == cond_Q(old(src));
{
    srai(dst, src, 31);
    and(dst, dst, qsrc);
    cond_set_Q_lemma(old(src), dst);
}

ghost procedure lemma_mq_add_correct(
    ghost d: uint32,
    ghost b: uint32,
    ghost c: uint32,
    ghost r: uint32,
    ghost x: nat,
    ghost y: nat) extern;

ghost procedure lemma_mq_sub_correct(
    ghost d: uint32,
    ghost b: uint32,
    ghost c: uint32,
    ghost r: uint32,
    ghost x: nat,
    ghost y: nat) extern;

ghost procedure lemma_mq_rshift1_correct(
    ghost par: uint32,
    ghost b: uint32,
    ghost c: uint32,
    ghost d: uint32,
    ghost r: uint32,
    ghost x: nat) extern;

procedure ntt_inline_mq_add()
    requires
        a0 == 12289;
        t1 == 0xffffcfff;

        a1 < 12289;
        a2 < 12289;
    reads
        a0; a1; a2; t1;
    modifies
        a3; a4;
    ensures
      a3 == mqadd(old(a2), old(a1));
{
    ghost var Q := 12289;
    ghost var x := a1;
    ghost var y := a2;

    assert to_int32(t1) == (-Q);
    let negQ := to_int32(t1);

    // a1 = y - Q
    add(a4, a2, t1);
    assert a4 == uint32_add(y, to_uint32(negQ));

    add(a4, a1, a4);
    assert a4 == uint32_add(x, uint32_add(y, to_uint32(negQ)));
    ghost var d := a4;

    srai(a3, a4, 0x1f); // 31
    ghost var b := a3;

    // a3 = (Q & -(d >> 31)) + d
    and(a3, a3, a0);
    
    // c == b & Q
    ghost var c := uint32_and(b, to_uint32(Q));
    assert c == a3;
   
    add(a3, a3, a4);
    
    lemma_mq_add_correct(d, b, c, a3, x, y);
}

procedure ntt_inline_mq_sub()
    requires
        a0 == 12289;
        a1 < 12289;
        a2 < 12289;
    reads
        a0; a1; a2;
    modifies
        a3; a4;
    ensures
        a3 == mqsub(old(a2), old(a1));
{
    ghost var x := a2;
    ghost var y := a1;
    
    sub(a3, a2, a1);
    ghost var d := a3;

    srai(a4, a3, 31);
    ghost var b := a4;

    and(a4, a4, a0);
    ghost var c := uint32_and(b, 12289);
    assert c == a4;

    add(a3, a4, a3);
    let r := a3;
    lemma_mq_sub_correct(d, b, c, r, x, y);
}

#verbatim
}
#endverbatim
